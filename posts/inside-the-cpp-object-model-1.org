#+BEGIN_COMMENT
.. title: 深入探索C++内存模型（1）
.. slug: inside-the-cpp-object-model-1
.. date: 2019-03-11 10:30:13 UTC+08:00
.. tags: cpp
.. category: cpp
.. link:
.. description:
.. type: text
.. status: draft
#+END_COMMENT
#+OPTIONS: num:t

#+TITLE: 深入探索C++内存模型（1）

最近花时间读了一下《深入探索C++内存模型》，这本带我了解到了更底层的C++知识。

这本书从C++语言各种特性的实现机制上进行细致剖析，进而总结出对软件开发具有指导意义的经验和结论。这本书的目标群体是具有开发经验的中高级开发人员，其内容的专业性是不容质疑的。从我的阅读感受上讲，它相对比那些一般的技术文档要耗时耗力。全书共三百多页，粗略地估算了一下，我却用了一个月的空余时间才读完。

我会将读书笔记整理成博文，这样能够加深记忆，也方便以后查阅。

{{{TEASER_END}}}

** 简介

书的原作者是Stanley B. Lippman，我读的是候捷翻译的中文版本。从书的序言和前言了解到，这两个作者都是在C++语言发展的早期做过贡献的，他们都与C++之父Bjarne共同开发过早期版本的C++编译器。这本书还带给我预期之外的收获，让我了解到C++语言较早期的发展过程，了解到在语言的初创期开发者门做出的努力。C++这门语言不断地发展演变，再到最近推行的C++11新标准，我作为使用这门语言的开发者，也能够感受到C++开发语言正在不断进化和完善。

对于英文资料，我一般都会选择原版，因为翻译后的中文版本一般都会比较生硬，理解起来不如原版更加容易。而候捷翻译的这个版本让我看到了作为一名翻译作者付出的努力，中文版修正了很多原书的错误，也为了方便读者理解做了很多润色。


** 第一章 关于对象 （object lessons）

C++在布局以及存取时间上主要的额外负担是由virtual引起，包括：
- virtual function 机制：用以支持一个有效率的“执行期”绑定（runtime binding）
- virtual base class 虚基类：用以实现“多次出现在继承体系中的base class，有一个单一而被共享的实体”
- multiple inheritance 多重继承：在“一个derived class和其第二或后继之base class的转换”时


*** C++对象模型
C++对象模型的设计需要从空间使用效率、程序执行效率进行考虑，同时还兼顾了对C语言中 =struct= 的支持。C++对象模型的特点主要有：
- nonstatic data member
