#+BEGIN_COMMENT
.. title: TCP协议（RFC793）
.. slug: transmission-control-protocol
.. date: 2018-09-28 21:56:05 UTC+08:00
.. tags: network, tcp, ip
.. category: network
.. link:
.. description:
.. type: text
.. status: draft
#+END_COMMENT

#+TITLE: TCP协议（RFC793）

传输控制协议（TCP协议）是因特网协议栈中很重要的一个协议，它是IP协议的补充。TCP协议提供基于IP网络的可靠的、有序的、查错的（error checked）节流传输。主流网络应大多基于TCP协议的。TCP协议格式由RFC793定义，本文是RFC793的要点摘录。

{{{TEASER_END}}}

** 概述
本节主要讲述了TCP协议的作用，阐述了核心功能的实现原理。

TCP is a connection-oriented, end-to-end reliable protocol designed to fit into a layered hierarchy of protocols which support multi-network applications. The TCP provides for reliable inter-process communication between pairs of processes in host computers attached to distinct but interconnected computer communication networks.

The TCP is intended to provide a reliable process-to-process communication service in a multinetwork environment. The TCP is intended to be a host-to-host protocol in common use in multiple networks.

TCP包含下列功能:
- Basic Data Transfer
- Reliability
- Flow Control
- Multiplexing
- Connections
- Precedence and Security

TCP协议是传输层通讯协议。
Applications that do not require reliable data stream service may use the User Datagram Protocol (UDP), which provides a connectionless datagram service that emphasizes reduced latency over reliability.

*** 基础概念
本节内容主要是TCP协议中的相关基础概念，对基础概念的准确理解是TCP协议展开论述的前提。

The internetwork environment consists of hosts connected to networks which are in turn interconnected via gateways. It is assumed that the network is based on packet switching technology.

The term packet is used generically here to mean the data of one transaction between a host and its network.

Hosts are computers attached to a network, and from the communication network’s point of view, are the sources and destinations of packets.

Processes are viewed as the active elements in host computers (in accordance with the fairly common definition of a process as a program in execution).

Since a process may need to distinguish among several communication streams between itself and another process (or processes), we imagine that each process may have a number of ports through which it communicates with the ports of other processes.

The TCP is assumed to be a module in an operating system. The users access the TCP much like they would access the file system.


*** 通信可靠性（Reliable Communication）
 A stream of data sent on a TCP connection is delivered reliably and in order at the destination.

Transmission is made reliable via the use of sequence numbers and acknowledgments.

An acknowledgment by TCP does not guarantee that the data has been delivered to the end user, but only that the receiving TCP has taken the responsibility to do so.

To govern the flow of data between TCPs, a flow control mechanism is employed. The receiving TCP reports a "window" to the sending TCP. This window specifies the number of octets, starting with the acknowledgment number, that the receiving TCP is currently prepared to receive.

*** 连接的建立和断开（Connection Establishment and Clearing）

To identify the separate data streams that a TCP may handle, the TCP provides a port identifier. Since port identifiers are selected independently by each TCP they might not be unique. To provide for unique addresses within each TCP, we concatenate an internet address identifying the TCP with a port identifier to create a socket which will be unique throughout all networks connected together.

 A connection is fully specified by the pair of sockets at the ends. A local socket may participate in many connections to different foreign sockets. A connection can be used to carry data in both directions, that is, it is "full duplex".

A connection is specified in the OPEN call by the local port and foreign socket arguments. In return, the TCP supplies a (short) local connection name by which the user refers to the connection in subsequent calls. To store this information we imagine that there is a data structure called a Transmission Control Block (TCB).

A passive OPEN request means that the process wants to accept incoming connection requests rather than attempting to initiate a connection. A service process that wished to provide services for unknown other processes would issue a passive OPEN request with an unspecified foreign socket. Processes can issue passive OPENs and wait for matching active OPENs from other processes and be informed by the TCP when connections have been established.

The procedures to establish connections utilize the synchronize (SYN) control flag and involves an exchange of three messages. This exchange has been termed a three-way hand shake.

A connection is initiated by the rendezvous of an arriving segment containing a SYN and a waiting TCB entry each created by a user OPEN command. The matching of local and foreign sockets determines when a connection has been initiated. The connection becomes "established" when sequence numbers have been synchronized in both directions.

The clearing of a connection also involves the exchange of segments, in this case carrying the FIN control flag.

*** 数据传输（Data Communication）
The data that flows on a connection may be thought of as a stream of octets. The sending user indicates in each SEND call whether the data in that call (and any preceeding calls) should be immediately pushed through to the receiving user by the setting of the PUSH flag.

A sending TCP is allowed to collect data from the sending user and to send that data in segments at its own convenience, until the push function is signaled, then it must send all unsent data. When a receiving TCP sees the PUSH flag, it must not wait for more data from the sending TCP before passing the data to the receiving process.

There is a coupling between the push function and the use of buffers of data that cross the TCP/user interface. Each time a PUSH flag is associated with data placed into the receiving user’s buffer, the buffer is returned to the user for processing even if the buffer is not filled. If data arrives that fills the user’s buffer before a PUSH is seen, the data is passed to the user in buffer size units.

TCP also provides a means to communicate to the receiver of data that at some point further along in the data stream than the receiver is currently reading there is urgent data. TCP does not attempt to define what the user specifically does upon being notified of pending urgent data, but the general notion is that the receiving process will take action to process the urgent data quickly.

*** 优先性和安全性（Precedence and Security）

The TCP makes use of the internet protocol type of service field and security option to provide precedence and security on a per connection basis to TCP users. Not all TCP modules will necessarily function in a multilevel secure environment; some may be limited to unclassified use only, and others may operate at only one security level and compartment. Consequently, some TCP implementations and services to users may be limited to a subset of the multilevel secure case.

TCP modules which operate in a multilevel secure environment must properly mark outgoing segments with the security, compartment, and precedence. Such TCP modules must also provide to their users or higher level protocols such as Telnet or THP an interface to allow them to specify the desired security level, compartment, and precedence of connections.

*** 鲁棒性原则（Robustness Principle）
TCP implementations will follow a general principle of robustness: be conservative in what you do, be liberal in what you accept from others.

** 协议规格

[[img-url:/images/post-transmission-control-protocol-1.png][tcp header format]]

*Source Port:* 16 bits
The source port number.

*Destination Port:* 16 bits
The destination port number.

*Sequence Number:* 32 bits
The sequence number of the first data octet in this segment (except when SYN is present). If SYN is present the sequence number is the initial sequence number (ISN) and the first data octet is ISN+1.

*Acknowledgment Number:* 32 bits
If the ACK control bit is set this field contains the value of the next sequence number the sender of the segment is expecting to receive. Once a connection is established this is always sent.

*Data Offset:* 4 bits
The number of 32 bit words in the TCP Header. This indicates where the data begins. The TCP header (even one including options) is an integral number of 32 bits long.

*Reserved:* 6 bits
Reserved for future use. Must be zero.

*Control Bits:* 6 bits (from left to right):
URG: Urgent Pointer field significant
ACK: Acknowledgment field significant
PSH: Push Function
RST: Reset the connection
SYN: Synchronize sequence numbers
FIN: No more data from sender

*Window:* 16 bits
The number of data octets beginning with the one indicated in the acknowledgment field which the sender of this segment is willing to accept.

*Checksum:* 16 bits
The checksum field is the 16 bit one’s complement of the one’s complement sum of all 16 bit words in the header and text. If a segment contains an odd number of header and text octets to be checksummed, the last octet is padded on the right with zeros to form a 16 bit word for checksum purposes. The pad is not transmitted as part of the segment. While computing the checksum, the checksum field itself is replaced with zeros.

The checksum also covers a 96 bit pseudo header conceptually

*Urgent Pointer:* 16 bits
This field communicates the current value of the urgent pointer as a positive offset from the sequence number in this segment. The urgent pointer points to the sequence number of the octet following the urgent data. This field is only be interpreted in segments with the URG control bit set.

*Options:* variable
Options may occupy space at the end of the TCP header and are a multiple of 8 bits in length. All options are included in the checksum.

*Padding:* variable
The TCP header padding is used to ensure that the TCP header ends and data begins on a 32 bit boundary. The padding is composed of zeros.


*** 术语

*Send Sequence Variables*
 SND.UNA - send unacknowledged
 SND.NXT - send next
 SND.WND - send window
 SND.UP - send urgent pointer
 SND.WL1 - segment sequence number used for last window update
 SND.WL2 - segment acknowledgment number used for last window update
 ISS - initial send sequence number

*Receive Sequence Variables*
 RCV.NXT - receive next
 RCV.WND - receive window
 RCV.UP - receive urgent pointer
 IRS - initial receive sequence number

*Current Segment Variables*
 SEG.SEQ - segment sequence number
 SEG.ACK - segment acknowledgment number
 SEG.LEN - segment length
 SEG.WND - segment window
 SEG.UP - segment urgent pointer
 SEG.PRC - segment precedence value

*A connection progresses through a series of states during its lifetime.*
LISTEN - represents waiting for a connection request from any remote TCP and port.
SYN-SENT - represents waiting for a matching connection request after having sent a connection request.
SYN-RECEIVED - represents waiting for a confirming connection request acknowledgment after having both received and sent a connection request.
ESTABLISHED - represents an open connection, data received can be delivered to the user. The normal state for the data transfer phase of the connection.
FIN-WAIT-1 - represents waiting for a connection termination request from the remote TCP, or an acknowledgment of the connection termination request previously sent.
FIN-WAIT-2 - represents waiting for a connection termination request from the remote TCP.
CLOSE-WAIT - represents waiting for a connection termination request from the local user.
CLOSING - represents waiting for a connection termination request acknowledgment from the remote TCP.
LAST-ACK - represents waiting for an acknowledgment of the connection termination request previously sent to the remote TCP (which includes an acknowledgment of its connection termination request).
TIME-WAIT - represents waiting for enough time to pass to be sure the remote TCP received the acknowledgment of its connection termination request.
CLOSED - represents no connection state at all.


#+BEGIN_COMMENT
page 24 finished for now
this protocol is so boring, I feel sleepy ready it.
#+END_COMMENT


** 参考资料
- https://tools.ietf.org/html/rfc793
- https://en.wikipedia.org/wiki/Transmission_Control_Protocol
