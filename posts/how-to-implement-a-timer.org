#+BEGIN_COMMENT
.. title: 如何实现一个定时器
.. slug: how-to-implement-a-timer
.. date: 2020-04-11 09:10:09 UTC+08:00
.. tags: cpp, linux, c, timer, timerfd, signal, alarm
.. category: computer science
.. link:
.. description:
.. type: text
/.. status: draft
#+END_COMMENT
#+OPTIONS: num:nil

#+TITLE: 如何实现一个定时器

在以前的一次面试中，我被问到该如何实现一个定时器，当时我并没有思考过这个问题，所以回答的并不令人满意。在日常的开发中，一个需要定时执行的任务是很常见的。我认为这个问题比较有意义，也非常具有代表性。于是，我查阅了一些资料，并整理出这篇博客。

{{{TEASER_END}}}

** 使用linux信号触发定时任务
可以使用操作系统API预订一个 =SIGALRM= 信号，在指定的时间后程序就能收到信号，在信号的处理函数中就能实现定时任务。具体的系统API如下：
#+BEGIN_SRC c
#include <unistd.h>
unsigned int alarm(unsigned int seconds);
#+END_SRC

这里值得一提的是另一个信号 =SIGVTALRM= ，可以使用 =setitimer= 系统接口进行设置。这个定时器计算的是程序在用户模式（user mode）消耗的时间。另外，这个定时器还可以通过传入的 =struct itimerval= 设置为循环触发。
#+BEGIN_SRC c
#include <sys/time.h>
int setitimer(int which, const struct itimerval *new_value,
              struct itimerval *old_value);
#+END_SRC

需要注意的是这两个API在同时使用时可能会相互干扰，它们可能会共用同一个定时器。

** 通过timerfd实现定时任务
timerfd是linux独有的接口，可以在定时器超时后通过一个文件描述符通知程序。

#+BEGIN_SRC c
#include <sys/timerfd.h>
int timerfd_create(int clockid, int flags);
int timerfd_settime(int fd, int flags,
                    const struct itimerspec *new_value,
                    struct itimerspec *old_value);
int timerfd_gettime(int fd, struct itimerspec *curr_value);
#+END_SRC

当这个文件描述符变为可读（readable）时，说明定时器超时了。最方便的是，这个文件描述符可以通过类似select的多路复用接口管理，这样我们就能同时设置并等待多个定时器了。

** 在网络编程中借助事件的等待间隔执行定时任务
在网络编程中，通常都会用到一套IO复用接口，如select/poll/epoll等，它们会帮你同时检查多个socket上是否有读写操作。这些接口都有一个等待时间，在这个指定时间是最大等待时间，即使在没有需要处理的IO操作时也会返回。这个时间是一般是个固定值，如10ms/20ms/50ms，它被称作网络库的基准频率。在这段空余时间中可以检查定时器是否超时，并执行超时定时器的回调函数。

可以将定时器存在一个优先队列中，每次从队列的前面取出定时器进行超时判断，直到出现了一个没超时的就终止判断，这样可以避免每次都扫描全部定时器。

在所有定时器的超时时间都相同时，可以将它们存放在一个单向队列中，每次增加时都放在最后，并从前面开始检查超时，这样只需要检查队列头部的那部分定时器了。

另一种思路是动态调整等待的间隔，每次选出最先需要超时的定时器，计算它的超时时间，将这个时间作为select的等待时间。这样每次时间都不一样，每次都基本准确，同时不会占用多余的CPU，这种模式叫做 =TICKLESS= 。

** 参考资料
- [[https://stackoverflow.com/a/10193120/5080719][stackoverflow - how to implement timer in c]]
- [[http://man7.org/linux/man-pages/man2/alarm.2.html][linux man - alarm]]
- [[http://man7.org/linux/man-pages/man2/setitimer.2.html][linux man - setitimer]]
- [[http://man7.org/linux/man-pages/man2/timerfd_create.2.html][linux man - timerfd]]
- [[http://www.skywind.me/blog/archives/1460][skywind blog - timer in network programming]]
