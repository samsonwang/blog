#+BEGIN_COMMENT
.. title: TCP协议（RFC793）-2-
.. slug: transmission-control-protocol-2
.. date: 2018-11-01 10:30:31 UTC+08:00
.. tags: network, tcp, ip
.. category: network
.. link:
.. description:
.. type: text
.. status: draft
#+END_COMMENT

#+TITLE: TCP协议（RFC793）-2-

本文主要内容是TCP协议的规格描述，包括具体的协议格式。

{{{TEASER_END}}}

** 协议规格

[[img-url:/images/post-transmission-control-protocol-2-1.png][tcp header format]]

*Source Port:* 16 bits
The source port number.

*Destination Port:* 16 bits
The destination port number.

*Sequence Number:* 32 bits
The sequence number of the first data octet in this segment (except when SYN is present). If SYN is present the sequence number is the initial sequence number (ISN) and the first data octet is ISN+1.

*Acknowledgment Number:* 32 bits
If the ACK control bit is set this field contains the value of the next sequence number the sender of the segment is expecting to receive. Once a connection is established this is always sent.

*Data Offset:* 4 bits
The number of 32 bit words in the TCP Header. This indicates where the data begins. The TCP header (even one including options) is an integral number of 32 bits long.

*Reserved:* 6 bits
Reserved for future use. Must be zero.

*Control Bits:* 6 bits (from left to right):
URG: Urgent Pointer field significant
ACK: Acknowledgment field significant
PSH: Push Function
RST: Reset the connection
SYN: Synchronize sequence numbers
FIN: No more data from sender

*Window:* 16 bits
The number of data octets beginning with the one indicated in the acknowledgment field which the sender of this segment is willing to accept.

*Checksum:* 16 bits
The checksum field is the 16 bit one’s complement of the one’s complement sum of all 16 bit words in the header and text. If a segment contains an odd number of header and text octets to be checksummed, the last octet is padded on the right with zeros to form a 16 bit word for checksum purposes. The pad is not transmitted as part of the segment. While computing the checksum, the checksum field itself is replaced with zeros.

The checksum also covers a 96 bit pseudo header conceptually

*Urgent Pointer:* 16 bits
This field communicates the current value of the urgent pointer as a positive offset from the sequence number in this segment. The urgent pointer points to the sequence number of the octet following the urgent data. This field is only be interpreted in segments with the URG control bit set.

*Options:* variable
Options may occupy space at the end of the TCP header and are a multiple of 8 bits in length. All options are included in the checksum.

*Padding:* variable
The TCP header padding is used to ensure that the TCP header ends and data begins on a 32 bit boundary. The padding is composed of zeros.


*** 术语
The maintenance of a TCP connection requires the remembering of several variables. We conceive of these variables being stored in a connection record called a Transmission Control Block or TCB. Among the variables stored in the TCB are the local and remote socket numbers, the security and precedence of the connection, pointers to the user’s send and receive buffers, pointers to the retransmit queue and to the current segment. In addition several variables relating to the send and receive sequence numbers are stored in the TCB.

*Send Sequence Variables*
 SND.UNA - send unacknowledged
 SND.NXT - send next
 SND.WND - send window
 SND.UP - send urgent pointer
 SND.WL1 - segment sequence number used for last window update
 SND.WL2 - segment acknowledgment number used for last window update
 ISS - initial send sequence number

*Receive Sequence Variables*
 RCV.NXT - receive next
 RCV.WND - receive window
 RCV.UP - receive urgent pointer
 IRS - initial receive sequence number

*Current Segment Variables*
 SEG.SEQ - segment sequence number
 SEG.ACK - segment acknowledgment number
 SEG.LEN - segment length
 SEG.WND - segment window
 SEG.UP - segment urgent pointer
 SEG.PRC - segment precedence value

*A connection progresses through a series of states during its lifetime.*
LISTEN - represents waiting for a connection request from any remote TCP and port.
SYN-SENT - represents waiting for a matching connection request after having sent a connection request.
SYN-RECEIVED - represents waiting for a confirming connection request acknowledgment after having both received and sent a connection request.
ESTABLISHED - represents an open connection, data received can be delivered to the user. The normal state for the data transfer phase of the connection.
FIN-WAIT-1 - represents waiting for a connection termination request from the remote TCP, or an acknowledgment of the connection termination request previously sent.
FIN-WAIT-2 - represents waiting for a connection termination request from the remote TCP.
CLOSE-WAIT - represents waiting for a connection termination request from the local user.
CLOSING - represents waiting for a connection termination request acknowledgment from the remote TCP.
LAST-ACK - represents waiting for an acknowledgment of the connection termination request previously sent to the remote TCP (which includes an acknowledgment of its connection termination request).
TIME-WAIT - represents waiting for enough time to pass to be sure the remote TCP received the acknowledgment of its connection termination request.
CLOSED - represents no connection state at all.

*** 序列号
在启动连接时，实际上是对序列号进行同步，

The acknowledgment mechanism employed is cumulative so that an acknowledgment of sequence number X indicates that all octets up to but not including X have been received.


#+BEGIN_COMMENT
page 24 finished for now
this protocol is so boring, I feel sleepy ready it.
#+END_COMMENT
