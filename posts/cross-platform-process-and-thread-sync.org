#+BEGIN_COMMENT
.. title: 跨平台下的进程和线程同步机制比较
.. slug: cross-platform-process-and-thread-sync
.. date: 2018-05-06 08:46:40 UTC+08:00
.. tags: draft, linux, windows
.. category: cpp
.. link: 
.. description: 
.. type: text
#+END_COMMENT

#+TITLE: 跨平台下的进程和线程同步机制比较

在跨平台软件开发时，经常会遇到多进程和多线程的同步。在linux和windows下都有各自的同步机制，本文主要总结和比较了两个平台下同步机制。

** 进程同步
进程同步，即两个不同的进程在访问相同的资源时，出现了竞争关系，需要一个同步机制使其在操作过程中保证排他性。

*** linux
从一些资料上来看、在linux下常用的进程间同步机制有原子操作（atomic operation）、自旋锁（spin lock）、读写锁（reader/writer lock）、互斥量（mutex）。
但是在实际操作中，如果在两个进程中获取同一份资源，只有获取到同一份进程同步设备，才有可能完成相应的同步操作。
这些进程同步方式在父子进程的同步上能够实现同步设备的共享访问，在执行fork之后子进程能够拥有父进程资源的拷贝，这样就能够完成进程间的相互同步了。

同步设备：（sync facility）同步设备这个词在本文中主要表示一个具体的原子变量、自旋锁、互斥量等。

但是对于两个独立的进程，它们如何能够实现同步呢？由于如何在两个进程中获取同一个同步设备呢？




*** windows







** 线程同步

*linux*

*windows*


** 同步机制的数量限制



** 参考资料

https://stackoverflow.com/questions/248911/how-do-i-synchronize-two-processes




