#+BEGIN_COMMENT
.. title: 每周算法：删去有序数组中的重复元素
.. slug: algorithm-weekly-remove-duplicates-from-sorted-array
.. date: 2018-10-09 21:06:21 UTC+08:00
.. tags: algorithm, leetcode
.. category: algorithm
.. link: https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/
.. description:
.. type: text
#+END_COMMENT

#+TITLE: 每周算法：删去有序数组中的重复元素

leetcode算法题第26道，难度为easy，这是非常基础的一道题。

{{{TEASER_END}}}

** Description
Given a sorted array nums, remove the duplicates *in-place* such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array *in-place* with O(1) extra memory.

*Example 1:*
#+BEGIN_EXAMPLE
Given nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.

It doesn't matter what you leave beyond the returned length.
#+END_EXAMPLE


*Example 2:*
#+BEGIN_EXAMPLE
Given nums = [0,0,1,1,1,2,2,3,3,4],

Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.

It doesn't matter what values are set beyond the returned length.
#+END_EXAMPLE

*Clarification:*

Confused why the returned value is an integer but your answer is an array?

Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.

Internally you can think of this:

#+BEGIN_EXAMPLE
// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
#+END_EXAMPLE

来源：[[https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/][leetcode 26 remove duplicates from sorted array]]

** Solution
*** Approach 1
这到题难度不高，方法也很容易想到，下面就是我的解法。容易看出时间复杂度为O(n)。
#+BEGIN_SRC cpp
int removeDuplicates(vector<int>& nums) {
    if (nums.size() <= 1) {
        return nums.size();
    }

    size_t left = 0;
    size_t right = 1;
    for (; right<nums.size(); ++right) {
        if (nums[left] != nums[right]) {
            ++left;
            nums[left] = nums[right];
        }
    }
    return left+1;
}
#+END_SRC

*** Approach 2
在我的答案AC后，我查看了下别人的提交记录，结果真的让我十分意外， =unique= 这个接口我还是不熟练。
#+BEGIN_SRC cpp
int removeDuplicates(vector<int>& nums) {
    if(nums.size() <= 1) return nums.size();
    vector<int>::iterator nums_end_it = unique(nums.begin(), nums.end());
    return nums_end_it - nums.begin();
}
#+END_SRC
