<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about linux)</title><link>http://samsonwang.me/</link><description></description><atom:link href="http://samsonwang.me/categories/linux.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017 &lt;a href="mailto:zl.wang@foxmail.com"&gt;Samson Wang&lt;/a&gt; </copyright><lastBuildDate>Wed, 25 Oct 2017 10:22:39 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>linux下使用gdb的调试技巧</title><link>http://samsonwang.me/posts/2017/debug-with-gdb-on-linux/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;代码编译阶段&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
在调试 &lt;code&gt;C/C++&lt;/code&gt; 代码时，在编译阶段使用 &lt;code&gt;gcc/g++ -g&lt;/code&gt; 命令编译，将调试信息生成在目标文件中。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;开启gdb模式&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;直接进入gdb模式 &lt;code&gt;gdb&lt;/code&gt; 
&lt;/li&gt;
&lt;li&gt;使用gdb模式开启一个新的进程 &lt;code&gt;gdb &amp;lt;appname&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;使用指定的程序来调试core文件 &lt;code&gt;gdb &amp;lt;appname&amp;gt; &amp;lt;corename&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;gdb模式中常用命令&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
以下指令为
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;bt&lt;/code&gt; backtrace
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i r&lt;/code&gt; info registers 查看寄存器
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i proc m&lt;/code&gt; memory mappings
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; breakpoint
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; run
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; continue
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; step in
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info&lt;/code&gt; info指令之后可以接
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;调试一个正在运行中的进程&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
如果一个正在运行中的程序与我们的预想不一样，我们可以使用gdb查看程序的运行状态（debug a running process）
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;方法1：使用 &lt;code&gt;gdb -p &amp;lt;pid&amp;gt;&lt;/code&gt; 命令来以attach的方式启动调试该进程id的进程
&lt;/li&gt;
&lt;li&gt;方法2：进入 &lt;code&gt;gdb&lt;/code&gt; 模式，使用 &lt;code&gt;attach &amp;lt;pid&amp;gt;&lt;/code&gt; 命令调试某个进程
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;设置源文件的目录&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;files&lt;/code&gt; 命令
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;directory&lt;/code&gt; 命令
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;core 文件相关设置&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
core文件是程序异常崩溃以后产生的，会将程序异常时的执行状态以快照的形式保存下来。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-1" class="outline-3"&gt;
&lt;h3 id="sec-3-1"&gt;查看core文件的设置&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;limit -c&lt;/code&gt;
  用于查看当前系统生成core文件的大小限制，如果设置为0，则表示不生成core文件
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat /proc/sys/kernel/core_pattern&lt;/code&gt;
  用于查看当前系统生成core文件的命名样式
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-2" class="outline-3"&gt;
&lt;h3 id="sec-3-2"&gt;更改core文件的设置&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;limit -c unlimited&lt;/code&gt; 不限制生成core文件的大小
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo "core.%e.%p" &amp;gt; /proc/sys/kernel/core_pattern&lt;/code&gt; 修改core文件命名规则
core文件会默认生成在用户 &lt;code&gt;HOME&lt;/code&gt; 路径中
&lt;/li&gt;
&lt;li&gt;使core相关配置重启后仍然有效
把下面这句话添加到 &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; 中，能够使该设置在系统重启后仍然生效
&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# core dump pattern
kernel.core_pattern=core.%p.%e.%s  
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>gdb</category><category>linux</category><guid>http://samsonwang.me/posts/2017/debug-with-gdb-on-linux/</guid><pubDate>Tue, 24 Oct 2017 00:58:25 GMT</pubDate></item></channel></rss>