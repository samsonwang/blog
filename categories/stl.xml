<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about STL)</title><link>http://samsonwang.me/</link><description></description><atom:link href="http://samsonwang.me/categories/stl.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2018 &lt;a href="mailto:zl.wang@foxmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc/4.0/"&gt;&lt;img alt="知识共享许可协议" style="border-width:0; vertical-align:text-top;" src="https://i.creativecommons.org/l/by-nc/4.0/80x15.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Tue, 16 Jan 2018 10:20:19 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>STL容器的迭代器失效问题</title><link>http://samsonwang.me/posts/iterator-invalidate.html</link><dc:creator>Samson Wang</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;1 引言&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
常见的STL容器都能使用迭代器访问容器内元素，迭代器相同于一个指向容器内元素的指针，可以通过移动迭代器实现遍历容器。&lt;br&gt;
但是在使用迭代器时需要考虑STL容器的失效问题；迭代器失效主要出现在对容器进行了增删操作之后，迭代器不再指向原本的元素。&lt;br&gt;
这时如果再通过迭代器访问容器就有可能出现异常。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;2 map容器&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
&lt;b&gt;内部数据结构&lt;/b&gt; ：红黑树&lt;br&gt;
&lt;b&gt;插入操作&lt;/b&gt; ：插入操作会申请新的节点空间，然后加入都红黑树中，原来的迭代器指向的内存空间都未改变，故不会出现迭代器失效。&lt;br&gt;
&lt;b&gt;删除操作&lt;/b&gt; ：删除操作只会引起被删除节点的迭代器失效。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;3 vector容器&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
&lt;b&gt;内部数据结构&lt;/b&gt; ：数组(一段连续内存空间)&lt;br&gt;
&lt;b&gt;插入操作&lt;/b&gt; ：由于vector使用的是一段有长度限制的连续空间，插入( &lt;code&gt;push_back&lt;/code&gt; / &lt;code&gt;insert&lt;/code&gt; )操作在vector中加入新的元素时需要分情况考虑。&lt;br&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;当vector中元素总数仍不大于capacity，这时插入位置后的元素都被依次移动到下一个位置，所以插入位置之后的迭代器都会失效。&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;当vector中元素总数大于capacity，这个时候会重新开辟更大的内存空间，将原来的vector中的内容复制到新的vector中，回收原先vector的内存空间。由于新的vector的地址已完全改变，所以原先的所有迭代器都会失效。&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;b&gt;删除操作&lt;/b&gt; ：删除( &lt;code&gt;pop_back&lt;/code&gt; / &lt;code&gt;erase&lt;/code&gt; )操作在vector中删除元素，删除位置后的元素都被依次复制到前一个位置，所以删除位置之后的迭代器都会失效。&lt;br&gt;
示例代码：&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;4 list容器&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
&lt;b&gt;内部数据结构&lt;/b&gt; ：双向环状链表&lt;br&gt;
&lt;b&gt;插入操作&lt;/b&gt; ：插入操作会申请新的节点空间，然后加入到链表中，原来的迭代器指向的内存空间都未改变，故不会出现迭代器失效。&lt;br&gt;
&lt;b&gt;删除操作&lt;/b&gt; ：删除操作只会引起被删除节点的迭代器失效。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;5 小结&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
在操作STL容器时，对容器增删（ &lt;code&gt;erase&lt;/code&gt; / &lt;code&gt;insert&lt;/code&gt; ）之后应该注意接收返回值，这样可以有效避免迭代器失效的产生。&lt;br&gt;
对容器进行遍历删除操作时，另一种语法技巧是在 &lt;code&gt;erase&lt;/code&gt; 接口中对迭代器进行后自增（it++），这种写法也能够保证遍历正常进行。理解这种写法需要参考运算符重载的相关知识，后自增操作会产生一个临时变量用于函数返回。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cpp</category><category>STL</category><guid>http://samsonwang.me/posts/iterator-invalidate.html</guid><pubDate>Wed, 10 Jan 2018 14:06:04 GMT</pubDate></item></channel></rss>