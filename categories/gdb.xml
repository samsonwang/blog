<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about gdb)</title><link>http://samsonwang.me/</link><description></description><atom:link href="http://samsonwang.me/categories/gdb.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2018 &lt;a href="mailto:zl.wang@foxmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc/4.0/"&gt;&lt;img alt="知识共享许可协议" style="border-width:0; vertical-align:text-top;" src="https://i.creativecommons.org/l/by-nc/4.0/80x15.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Wed, 25 Apr 2018 14:33:31 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>在gdb调试时忽略系统信号（signal）</title><link>http://samsonwang.me/posts/gdb-ignore-received-signal/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
在gdb调试程序时，默认情况下gdb在收到信号时会中断程序的运行，并将收到的信号显示出来。这时，可以选择输入 &lt;code&gt;c&lt;/code&gt; ( &lt;code&gt;continue&lt;/code&gt; )让程序继续运行。如果程序会重复收到这信号，会非常影响调试效率。可以通过配置忽略指定的系统信号。&lt;br&gt;
查看当前系统信号的处理信息的指令&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) info signal
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
以调试网络程序为例，进程会经常收到 &lt;code&gt;SIGPIPE&lt;/code&gt; 消息，对于网络进程的 &lt;code&gt;SIGPIPE&lt;/code&gt; 消息在程序中会由自身处理，可以使用以下指令让gdb不再提示 &lt;code&gt;SIGPIPE&lt;/code&gt; 信号。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) handle SIGPIPE nostop noprint
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
参考资料： &lt;a href="ftp://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_38.html"&gt;gnu gdb manual&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;</description><category>gdb</category><category>linux</category><guid>http://samsonwang.me/posts/gdb-ignore-received-signal/</guid><pubDate>Thu, 19 Apr 2018 08:00:47 GMT</pubDate></item><item><title>Linux下使用gdb的调试技巧（2）</title><link>http://samsonwang.me/posts/debug-with-gdb-on-linux-2/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
相关文章：&lt;a href="https://samsonwang.me/posts/debug-with-gdb-on-linux/"&gt;Linux下使用gdb的调试技巧（1）&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
本文重点介绍在gdb模式下的常用命令。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
查看帮助信息&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) help all
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
查看线程信息&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) info thread
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
切换到某一线程&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) thread 2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
查看调用堆栈信息&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) bt
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
查看某个调用栈&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) frame 3
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
增加断点&lt;br&gt;
断点格式：&lt;br&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;函数名&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;文件名：行号&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;当前调试文件的行号&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) breakpoint xxx
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
删除断点&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) delete xxx
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
启用/禁用断点&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) disable/enable xxx
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
查看断点信息&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) info break
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
临时断点，临时断点的使用方法与普通断点相同&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) tb xxx
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
在gdb模式下，回车会执行上一次输入的命令&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
运行到指定行&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;until 81
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
在gdb中打印长字符串&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) set print element 0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
在gdb中强制在一个线程内调试运行&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set scheduler-locking step
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
在gdb中向程序发送信号&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) signal
&lt;/pre&gt;&lt;/div&gt;</description><category>gdb</category><category>linux</category><guid>http://samsonwang.me/posts/debug-with-gdb-on-linux-2/</guid><pubDate>Tue, 03 Apr 2018 14:51:39 GMT</pubDate></item><item><title>Linux下使用GDB的调试技巧</title><link>http://samsonwang.me/posts/debug-with-gdb-on-linux/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;1 代码编译阶段&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
在调试C/C++代码时，在编译阶段使用 &lt;code&gt;gcc/g++ -g&lt;/code&gt; 命令编译，将调试信息生成在目标文件中。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;2 开启gdb模式&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;直接进入gdb模式: &lt;code&gt;gdb&lt;/code&gt; &lt;br&gt;
&lt;/li&gt;
&lt;li&gt;使用gdb模式开启一个新的进程: &lt;code&gt;gdb &amp;lt;appname&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;使用指定的程序来调试core文件: &lt;code&gt;gdb &amp;lt;appname&amp;gt; &amp;lt;corename&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://samsonwang.me/posts/debug-with-gdb-on-linux/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>gdb</category><category>linux</category><guid>http://samsonwang.me/posts/debug-with-gdb-on-linux/</guid><pubDate>Tue, 24 Oct 2017 00:58:25 GMT</pubDate></item></channel></rss>