<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about git)</title><link>https://samsonwang.me/</link><description></description><atom:link href="https://samsonwang.me/tags/category-git.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2018 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;&lt;img alt="知识共享许可协议" style="padding-bottom:2px" src="https://i.creativecommons.org/l/by-nc/4.0/80x15.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Fri, 30 Nov 2018 08:22:03 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>为git设置socks5代理</title><link>https://samsonwang.me/posts/use-git-with-socks5-proxy/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
在某些时候，为了绕过网络封锁，在使用git时需要借助代理完成相关网络操作。&lt;br&gt;
&lt;/p&gt;

&lt;div id="outline-container-org18518e6" class="outline-2"&gt;
&lt;h2 id="org18518e6"&gt;一个可用的VPN代理是先决条件&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org18518e6"&gt;
&lt;p&gt;
关于VPN的架设就不在此讨论了。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0b097f1" class="outline-2"&gt;
&lt;h2 id="org0b097f1"&gt;将repo的链接由ssh改为为https&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0b097f1"&gt;
&lt;p&gt;
已经使用https的repo跳过此步骤。&lt;br&gt;
本教程需要通过https（http）的方式使用代理，所以如果现有的repo是使用ssh方式clone到本地的，需要修改其为https方式。&lt;br&gt;
需要修改 &lt;code&gt;repo_name/.git/config&lt;/code&gt; 中的url配置，将其中的git格式改为https格式。使用文本编辑工具将其打开进行修改，以github为例，需要将 &lt;code&gt;git@github.com:user_name/repo_name.git&lt;/code&gt; 改为 &lt;code&gt;https://github.com/user_name/repo_name.git&lt;/code&gt; 。&lt;br&gt;
可以使用sed指令完成替换。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed -i 's/git@github.com:/git:\/\/github.com\//' ./.git/config
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6ab5cd6" class="outline-2"&gt;
&lt;h2 id="org6ab5cd6"&gt;设置git使用代理&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6ab5cd6"&gt;
&lt;p&gt;
将git配置为使用socks5代理，以socks5的ip和端口是 &lt;code&gt;127.0.0.1:1080&lt;/code&gt; 为例。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global http.proxy 'socks5://127.0.0.1:1080'
git config --global https.proxy 'socks5://127.0.0.1:1080'
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge307232" class="outline-2"&gt;
&lt;h2 id="orge307232"&gt;将登录信息缓存下来&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge307232"&gt;
&lt;p&gt;
使用https时，在向远程仓库进行推送（git push）时会要求验证用户名和密码，由于每次都输入验证信息是十分繁琐的，考虑将验证信息缓存下来。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global credential.helper cache
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
git默认会将密码缓存15分钟，在这期间进行的操作是不需要再次进行密码验证的，可以使用下面命令修改缓存的时长。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global credential.helper "cache --timeout=3600"
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1dcf661" class="outline-2"&gt;
&lt;h2 id="org1dcf661"&gt;将登陆信息保存下来&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1dcf661"&gt;
&lt;p&gt;
也可以考虑将用户名和密码永久保存下来，这样就不需要再次进行密码验证了。&lt;br&gt;
&lt;b&gt;注意:&lt;/b&gt; 使用这种配置会将明文的账户和密码保存在 &lt;code&gt;~/.git-cretidentials&lt;/code&gt; 文件中，所以仅推荐在个人电脑中使用这个配置。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global credential.helper store
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdb32185" class="outline-2"&gt;
&lt;h2 id="orgdb32185"&gt;参考资料&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdb32185"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/5343068/is-there-a-way-to-skip-password-typing-when-using-https-on-github"&gt;stackoverflow question&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
（全文完）&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>git</category><category>socks5</category><category>vpn</category><guid>https://samsonwang.me/posts/use-git-with-socks5-proxy/</guid><pubDate>Thu, 08 Feb 2018 01:26:07 GMT</pubDate></item><item><title>常用git操作备忘</title><link>https://samsonwang.me/posts/git-cheatsheet/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
update: 2018-02-15&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
对常用指令进行总结，方便以后遇到相同情况时查阅。&lt;br&gt;
&lt;/p&gt;
&lt;div id="outline-container-orgacbcada" class="outline-2"&gt;
&lt;h2 id="orgacbcada"&gt;1 撤销与回退相关&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgacbcada"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org94ae990" class="outline-3"&gt;
&lt;h3 id="org94ae990"&gt;1.1 修正最近的提交消息&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org94ae990"&gt;
&lt;p&gt;
&lt;b&gt;情景&lt;/b&gt; ：在最近的一次提交（ &lt;code&gt;git commit&lt;/code&gt; ）中输入的信息有误，并且这次提交没有被推送（ &lt;code&gt;git push&lt;/code&gt; ）到远程仓库。&lt;br&gt;
&lt;b&gt;方法&lt;/b&gt; ： &lt;code&gt;git commit --amend&lt;/code&gt; 或 &lt;code&gt;git commit --amend -m "correct_message"&lt;/code&gt;&lt;br&gt;
&lt;b&gt;说明&lt;/b&gt; ： &lt;code&gt;git commit --amend&lt;/code&gt; 会使用一个新的提交更新并替换最近的一次提交，如果有在临时区域（staged）的修改，也会合并提交；如果有新的提交信息，则会一并提交。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org22abcd1" class="outline-3"&gt;
&lt;h3 id="org22abcd1"&gt;1.2 撤销本地变更&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org22abcd1"&gt;
&lt;p&gt;
&lt;b&gt;情景&lt;/b&gt; ：当无意中修改了一个文件，想要回退这个文件的修改时。&lt;br&gt;
&lt;b&gt;方法&lt;/b&gt; ： &lt;code&gt;git checkout -- &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;b&gt;说明&lt;/b&gt; ：这条指令会把该文件回退到某个git记录中的版本，git默认会回退到 &lt;code&gt;HEAD&lt;/code&gt; 版本。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9318821" class="outline-3"&gt;
&lt;h3 id="org9318821"&gt;1.3 重置本地修改&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9318821"&gt;
&lt;p&gt;
&lt;b&gt;情景&lt;/b&gt; ：已经进行了多次提交，但是没有推送到版本库中，希望撤销这些提交。&lt;br&gt;
&lt;b&gt;方法&lt;/b&gt; ： &lt;code&gt;git reset &amp;lt;last good SHA&amp;gt;&lt;/code&gt; 或 &lt;code&gt;git reset --hard &amp;lt;last good SHA&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;b&gt;说明&lt;/b&gt; ： &lt;code&gt;git reset&lt;/code&gt; 会把本地代码恢复到没有提交（ &lt;code&gt;git commit&lt;/code&gt; ）的状态，做出的修改会保留。 &lt;code&gt;git reset --hard&lt;/code&gt; 会把这些修改丢弃掉。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd62c503" class="outline-3"&gt;
&lt;h3 id="orgd62c503"&gt;1.4 恢复被重置的本地修改&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd62c503"&gt;
&lt;p&gt;
&lt;b&gt;情景&lt;/b&gt; ：在按照1.3中操作后，想恢复重置以前的状态。&lt;br&gt;
&lt;b&gt;方法&lt;/b&gt; ： &lt;code&gt;git reflog&lt;/code&gt; 后执行 &lt;code&gt;git reset&lt;/code&gt; 或 &lt;code&gt;git checkout&lt;/code&gt;&lt;br&gt;
&lt;b&gt;说明&lt;/b&gt; ： &lt;code&gt;git reflog&lt;/code&gt; 会呈现所有提交过的历史，是一个十分实用的功能。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgabf92b6" class="outline-2"&gt;
&lt;h2 id="orgabf92b6"&gt;2 分支操作相关&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgabf92b6"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2e0ef1f" class="outline-3"&gt;
&lt;h3 id="org2e0ef1f"&gt;2.1 创建一个本地分支并推送到远端&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2e0ef1f"&gt;
&lt;p&gt;
&lt;b&gt;方法&lt;/b&gt; ：&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git branch branch_name
git push origin branch_name
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb45557d" class="outline-3"&gt;
&lt;h3 id="orgb45557d"&gt;2.2 在本地创建一个远程分支&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb45557d"&gt;
&lt;p&gt;
&lt;b&gt;方法&lt;/b&gt; ：&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git fetch origin
git checkout -b  branch_name origin/branch_name
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf66b4c4" class="outline-3"&gt;
&lt;h3 id="orgf66b4c4"&gt;2.3 在分支上进行进度迁移&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf66b4c4"&gt;
&lt;p&gt;
&lt;b&gt;情景&lt;/b&gt; ： 进行了几次提交后，发现自己正在错误的分支上干活。&lt;br&gt;
&lt;b&gt;方法&lt;/b&gt; ：&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git branch feature
git reset --hard origin/master
git checkout feature
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
&lt;b&gt;原理&lt;/b&gt; ： 使用feature分支复制了当前分支，将当前分支回退到初始状态，在feature分支上接着干活。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org284dbbe" class="outline-2"&gt;
&lt;h2 id="org284dbbe"&gt;3 git submodule 相关操作&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org284dbbe"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org71ebc27" class="outline-3"&gt;
&lt;h3 id="org71ebc27"&gt;3.1 向当前repo中增加一个submodule&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org71ebc27"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submoudle add &amp;lt;module url&amp;gt; &amp;lt;local path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5562090" class="outline-3"&gt;
&lt;h3 id="org5562090"&gt;3.2 初始化submodule&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5562090"&gt;
&lt;p&gt;
在将一个具有submodule的repo拉取到本地以后需要对submodule进行初始化&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule init
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2d2ce7c" class="outline-3"&gt;
&lt;h3 id="org2d2ce7c"&gt;3.3 更新submodule&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2d2ce7c"&gt;
&lt;p&gt;
在开发中可以直接进入submodule的目录对每一个submodule执行更新操作，也可以使用命令统一完成submodule的更新操作。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule update
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org538a051" class="outline-3"&gt;
&lt;h3 id="org538a051"&gt;3.4 删掉submodule&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org538a051"&gt;
&lt;p&gt;
对于不需要的submodule，可以将其删掉。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule rm &amp;lt;local/path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7453533" class="outline-2"&gt;
&lt;h2 id="org7453533"&gt;终端配置&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7453533"&gt;
&lt;p&gt;
使用命令简称方便操作&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# git related
alias g='git status --short -b'
alias ga='git add'
alias gb='git branch'
alias gc='git commit -m'
alias gd='git diff'
alias gco='git checkout'
alias gps='git push'
alias gpl='git pull'
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cheatsheet</category><category>git</category><guid>https://samsonwang.me/posts/git-cheatsheet/</guid><pubDate>Fri, 19 Jan 2018 04:39:16 GMT</pubDate></item></channel></rss>