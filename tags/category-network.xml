<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/blog/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about network)</title><link>https://samsonwang.github.io/blog/</link><description></description><atom:link href="https://samsonwang.github.io/blog/tags/category-network.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2025 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;
&lt;img alt="cc-by-nc 4.0" style="padding-bottom:2px" src="/images/cc-by-nc.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Wed, 06 Aug 2025 06:52:26 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>如何检测TCP连接的异常断开</title><link>https://samsonwang.github.io/blog/posts/2021/how-to-detect-tcp-abnormal-disconnection/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在以往的开发中，我会通过 &lt;code&gt;recv()&lt;/code&gt; 接口的返回值来判断连接是否断开。但有时候我发现TCP连接已经无法正常收发数据了 &lt;code&gt;recv()&lt;/code&gt; 的返回值仍然不是0。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/2021/how-to-detect-tcp-abnormal-disconnection/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>network</category><category>tcp</category><guid>https://samsonwang.github.io/blog/posts/2021/how-to-detect-tcp-abnormal-disconnection/</guid><pubDate>Mon, 08 Nov 2021 02:52:34 GMT</pubDate></item><item><title>UDP协议（RFC768）</title><link>https://samsonwang.github.io/blog/posts/2018/user-datagram-protocol/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
UDP协议是一种无连接（connectless）的通信协议，UDP协议需要与IP协议配合使用。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/2018/user-datagram-protocol/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>ip</category><category>network</category><category>tcp</category><category>udp</category><guid>https://samsonwang.github.io/blog/posts/2018/user-datagram-protocol/</guid><pubDate>Thu, 08 Nov 2018 13:30:01 GMT</pubDate></item><item><title>网络协议的抓包分析</title><link>https://samsonwang.github.io/blog/posts/2018/internet-protocol-stack-tcpdump-analysis/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文主要内容是对tcpdump所抓取的数据包进行分析，按照网络协议解出每个字节所代表的含义。&lt;br&gt;
通过前面几篇博客的学习和总结，我对网络协议有了一定的了解，这时需要理论结合实际，使学到的知识记忆更加深刻。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/2018/internet-protocol-stack-tcpdump-analysis/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>ip</category><category>network</category><category>tcp</category><category>tcpdump</category><guid>https://samsonwang.github.io/blog/posts/2018/internet-protocol-stack-tcpdump-analysis/</guid><pubDate>Mon, 05 Nov 2018 14:19:19 GMT</pubDate></item><item><title>TCP协议（RFC793）-2-</title><link>https://samsonwang.github.io/blog/posts/2018/transmission-control-protocol-2/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文主要内容是TCP协议的规格描述，包括具体的协议格式、相关术语解释、协议实现指导等。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/2018/transmission-control-protocol-2/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>ip</category><category>network</category><category>tcp</category><guid>https://samsonwang.github.io/blog/posts/2018/transmission-control-protocol-2/</guid><pubDate>Mon, 05 Nov 2018 02:30:31 GMT</pubDate></item><item><title>TCP协议（RFC793）-1-</title><link>https://samsonwang.github.io/blog/posts/2018/transmission-control-protocol-1/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
传输控制协议（TCP协议）是因特网协议栈中很重要的一个协议，它是IP协议的补充。TCP协议提供基于IP网络的可靠的、有序的、查错的（error checked）节流传输。主流网络应大多基于TCP协议的。TCP协议格式由RFC793定义，本文是RFC793概述部分的要点摘录，阐述了基础概念和实现原理。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/2018/transmission-control-protocol-1/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>ip</category><category>network</category><category>tcp</category><guid>https://samsonwang.github.io/blog/posts/2018/transmission-control-protocol-1/</guid><pubDate>Thu, 01 Nov 2018 01:56:05 GMT</pubDate></item><item><title>网关简介</title><link>https://samsonwang.github.io/blog/posts/2018/brief-intro-to-gateway/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
网关是在网络通信中常常被提起的一个词，它究竟是什么，它其中包含哪些知识点呢？本文将带你了解网关的一些基础概念。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/2018/brief-intro-to-gateway/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>gateway</category><category>network</category><category>router</category><guid>https://samsonwang.github.io/blog/posts/2018/brief-intro-to-gateway/</guid><pubDate>Sat, 20 Oct 2018 08:20:39 GMT</pubDate></item><item><title>路由、调制解调器和交换机</title><link>https://samsonwang.github.io/blog/posts/2018/router-modem-and-switch/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
路由、调制解调器和交换机，这三个是我们经常使用的网络设备。它们在网络中的作用是什么？它们工作在网络模型的哪一层？本篇文章将带你了解他们的原理与和区别。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/2018/router-modem-and-switch/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>moderm</category><category>network</category><category>router</category><category>switch</category><guid>https://samsonwang.github.io/blog/posts/2018/router-modem-and-switch/</guid><pubDate>Thu, 27 Sep 2018 10:34:54 GMT</pubDate></item><item><title>IP协议（RFC791）</title><link>https://samsonwang.github.io/blog/posts/2018/internet-protocol/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文是IPv4协议的摘要和笔记，IPv4协议格式由RFC791规定，RFC791协议的原文可以在 &lt;a href="https://tools.ietf.org/html/rfc791"&gt;这里&lt;/a&gt; 找到。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/2018/internet-protocol/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>ip</category><category>network</category><category>protocol</category><guid>https://samsonwang.github.io/blog/posts/2018/internet-protocol/</guid><pubDate>Mon, 24 Sep 2018 12:16:15 GMT</pubDate></item><item><title>网络通信协议</title><link>https://samsonwang.github.io/blog/posts/2018/network-protocol-suite/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文总结了两种常见的网络模型，OSI模型和TCP/IP模型，并比较了二者之间的区别。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/2018/network-protocol-suite/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>ip</category><category>network</category><category>osi</category><category>tcp</category><guid>https://samsonwang.github.io/blog/posts/2018/network-protocol-suite/</guid><pubDate>Fri, 21 Sep 2018 09:51:57 GMT</pubDate></item><item><title>客户端使用非阻塞socket进行connect的流程</title><link>https://samsonwang.github.io/blog/posts/2018/non-blocking-socket-connect-tips/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div id="outline-container-org9cbffc0" class="outline-2"&gt;
&lt;h2 id="org9cbffc0"&gt;问题&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9cbffc0"&gt;
&lt;p&gt;
使用非阻塞（ &lt;code&gt;non-blocking&lt;/code&gt; ） socket尝试与服务端建立连接（ &lt;code&gt;connect&lt;/code&gt; ）时，由于是io非阻塞的，所以 &lt;code&gt;connect&lt;/code&gt; 函数会立即返回，那么如何判断client与server连接成功了呢？&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd37e87a" class="outline-2"&gt;
&lt;h2 id="orgd37e87a"&gt;解答&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd37e87a"&gt;
&lt;p&gt;
客户端建立连接的示例代码如下：&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EINPROGRESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// case1. error, fail somehow, close socket&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// case2. connection has succeeded immediately&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// case3. connection attempt is in progress&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
由于是非阻塞模式，所以 &lt;code&gt;connect&lt;/code&gt; 之后会直接返回，根据返回值 &lt;code&gt;res&lt;/code&gt; 和 &lt;code&gt;errno&lt;/code&gt; 能够判断建立连接的结果。&lt;br&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;case1，表示连接失败；&lt;br&gt;&lt;/li&gt;
&lt;li&gt;case2，表示连接建立成功；&lt;br&gt;&lt;/li&gt;
&lt;li&gt;case3，表示正在建立连接的过程中，在这个情况下，需要等待socket变成可写（writable）状态，可以使用 &lt;code&gt;select&lt;/code&gt; 或 &lt;code&gt;epoll&lt;/code&gt; 完成；&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
在 case3 情况下，socket可写后，执行下面的代码检查socket是否出现错误。&lt;br&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;case4和case5，表示socket出现了错误，将会关闭连接；&lt;br&gt;&lt;/li&gt;
&lt;li&gt;case6，表示连接建立成功，可以开始 &lt;code&gt;read&lt;/code&gt; 和 &lt;code&gt;write&lt;/code&gt; 了。&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;socklen_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result_len&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SO_ERROR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result_len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// case4. error, fail somehow, close socket&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// case5. connection failed; error code is in 'result'&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// case6. socket is ready for read()/write()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org102f67b" class="outline-2"&gt;
&lt;h2 id="org102f67b"&gt;参考资料&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org102f67b"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/10187347/async-connect-and-disconnect-with-epoll-linux/10194883#10194883"&gt;stackoverflow.com&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>network</category><category>nio</category><category>non-blocking</category><category>socket</category><guid>https://samsonwang.github.io/blog/posts/2018/non-blocking-socket-connect-tips/</guid><pubDate>Fri, 31 Aug 2018 09:04:19 GMT</pubDate></item></channel></rss>