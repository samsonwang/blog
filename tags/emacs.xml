<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about emacs)</title><link>https://blog.wangzhl.com/</link><description></description><atom:link href="https://blog.wangzhl.com/tags/emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2021 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;
&lt;img alt="cc-by-nc 4.0" style="padding-bottom:2px" src="/images/cc-by-nc.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Sun, 20 Jun 2021 07:20:44 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>gdb图形化调试</title><link>https://blog.wangzhl.com/posts/2018/debug-with-gdb-gui/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
gdb是linux下很强大的调试工具，它使用命令行进行交互。相比于windows下visual studio的图形化调试界面，gdb的命令行方式操作起来不是很方便，从用户友好度上二者难以相提并论。不过gdb也有许多配套的前端组件，提供了图形化界面展示调试过程中的信息，这样就比传统命令行方式要方便很多。本文介绍了使用图形化的gdb前端让调试变得便捷高效，建议再阅读本文之前先掌握一些gdb的基础知识。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/2018/debug-with-gdb-gui/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>gdb</category><category>linux</category><guid>https://blog.wangzhl.com/posts/2018/debug-with-gdb-gui/</guid><pubDate>Thu, 18 Oct 2018 01:45:14 GMT</pubDate></item><item><title>在EMACS中对目录进行独立配置</title><link>https://blog.wangzhl.com/posts/2018/emacs-directory-variables/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
如果你曾经同时维护多个软件项目，每个软件项目的代码风格都有各自的偏好。举个常见的例子，项目A要求使用 &lt;code&gt;tab&lt;/code&gt; 进行缩进，而项目B要求使用空格进行缩进，虽然这样的代码风格问题看起来无关紧要，但这确实是代码编写中实实在在的问题。本文无意于讨论两者风格的优劣，而是想介绍在EMACS中优雅地解决这个问题的方法。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/2018/emacs-directory-variables/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>elisp</category><category>emacs</category><category>lisp</category><guid>https://blog.wangzhl.com/posts/2018/emacs-directory-variables/</guid><pubDate>Wed, 10 Oct 2018 09:11:57 GMT</pubDate></item><item><title>emacs的键盘宏（keyboard macro）</title><link>https://blog.wangzhl.com/posts/2018/using-keyboard-marcos-in-emacs/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
对于一些有规律且重复性的编辑任务, 手动完成十分无聊, 并且需要耗费较长的时间。我在youtube上看到一个使用keyboard marco的 &lt;a href="https://youtu.be/wFCO__0prCM"&gt;视频&lt;/a&gt; 后, 受到很大的启发, 在以后的使用中也会尝试使用宏。我总结了一下视频中的技巧要点，并查阅资料对相关知识点进行了补充和完善。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
有梯子的同学可以去看看，视频地址：&lt;a href="https://youtu.be/wFCO__0prCM"&gt;https://youtu.be/wFCO__0prCM&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;操作指令&lt;/b&gt;&lt;br&gt;
开始记录宏: 命令名称 &lt;code&gt;kmacro-start-macro&lt;/code&gt; , 快捷键 &lt;code&gt;C-x-(&lt;/code&gt; 或 &lt;code&gt;&amp;lt;f3&amp;gt;&lt;/code&gt;&lt;br&gt;
结束记录宏: 命令名称 &lt;code&gt;kmacro-end-macro&lt;/code&gt; , 快捷键 &lt;code&gt;C-x-)&lt;/code&gt; 或 &lt;code&gt;&amp;lt;f4&amp;gt;&lt;/code&gt;&lt;br&gt;
执行宏: 命令名称 &lt;code&gt;kmacro-end-and-call-macro&lt;/code&gt; , 快捷键 &lt;code&gt;C-x-e&lt;/code&gt; , 可以使用 &lt;code&gt;C-u&lt;/code&gt; 指定这个宏的执行次数&lt;br&gt;
清除多余的空格: 命令名称 &lt;code&gt;fixup-whitespace&lt;/code&gt; , 这个命令我是第一次见到, 以后可以尝试多用用。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;参考资料&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.emacswiki.org/emacs/KeyboardMacros"&gt;emacs wiki&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>emacs</category><guid>https://blog.wangzhl.com/posts/2018/using-keyboard-marcos-in-emacs/</guid><pubDate>Sat, 11 Aug 2018 02:26:32 GMT</pubDate></item><item><title>提高emacs中浏览和选择操作效率的技巧</title><link>https://blog.wangzhl.com/posts/2018/navigation-and-selection-effectively-in-emacs/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div id="outline-container-org4ddddbd" class="outline-2"&gt;
&lt;h2 id="org4ddddbd"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 引言&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Gaurab Paul的 &lt;a href="https://lorefnon.tech/2018/07/14/getting-productive-with-selection-and-navigation-in-emacs/"&gt;一篇博文&lt;/a&gt; 给了我很大的启发，他详细地介绍了emacs中的相关概念，并提供了许多充满想象力的小技巧。作为emacs的入门级选手确实学到了很多，也拓宽了自己的思路。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
我最初的开发环境是Visual Studio，这一类比较大型的IDE集成了许多功能，但同时也会束缚住使用者的想法。通过这篇文章我感受到的由普通操作指令能组合成的新编辑方式。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
如果英文水平允许的话，非常推荐阅读一下原版的博文，原文中有更加丰富形象的图片示例，无论是跟我一样刚刚入门emacs的新手，还是经验丰富的老兵，都能够从中获得启发。下面，我结合自己的理解和收获谈谈emacs中操作的体会。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgff48a17" class="outline-2"&gt;
&lt;h2 id="orgff48a17"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; &lt;code&gt;point&lt;/code&gt; 、 &lt;code&gt;mark&lt;/code&gt; 和 &lt;code&gt;region&lt;/code&gt; 的概念&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
我之前进行代码段复制的操作是十分基础的，用 &lt;code&gt;C-@&lt;/code&gt; 模拟鼠标按下，方向键模拟鼠标拖动，在鼠标拖动的过程中就形成了一个选区，然后用 &lt;code&gt;M-w&lt;/code&gt; 对这个选区进行复制操作，用 &lt;code&gt;C-y&lt;/code&gt; 粘贴被复制的内容。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
以上操作带出了几个非常重要的概念 。在emacs中，鼠标光标所在位置被称作 &lt;code&gt;point&lt;/code&gt; ；组合键 &lt;code&gt;C-@&lt;/code&gt; 执行的是 &lt;code&gt;set-mark-command&lt;/code&gt; 命令，就是将 &lt;code&gt;point&lt;/code&gt; 所在位置标记为 &lt;code&gt;mark&lt;/code&gt; ；通过移动光标，也就是移动 &lt;code&gt;point&lt;/code&gt; 后，在 &lt;code&gt;point&lt;/code&gt; 与 &lt;code&gt;mark&lt;/code&gt; 之间就形成了 &lt;code&gt;region&lt;/code&gt; 。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org56d2e59" class="outline-2"&gt;
&lt;h2 id="org56d2e59"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; &lt;code&gt;region&lt;/code&gt; 操作技巧&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6b1b165" class="outline-3"&gt;
&lt;h3 id="org6b1b165"&gt;&lt;span class="section-number-3"&gt;3.1&lt;/span&gt; 调整 &lt;code&gt;region&lt;/code&gt; 的大小&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;p&gt;
下面就来介绍一个非常重要的命令 &lt;code&gt;exchange-point-and-mark&lt;/code&gt; ，这个命令默认被绑定在组合键 &lt;code&gt;C-x C-x&lt;/code&gt; 上，从字面意思上很容易理解这条指令的作用，就是交换 &lt;code&gt;mark&lt;/code&gt; 和 &lt;code&gt;point&lt;/code&gt; 的位置。这样做的意义在于能够方便地切换 &lt;code&gt;region&lt;/code&gt; 的可动边界，这样能够使 &lt;code&gt;region&lt;/code&gt; 方便地分别从两端调整大小。&lt;br&gt;
下面的示例是截取自Paul的博文，需要注意的是，他习惯于使用 &lt;code&gt;C-SPC&lt;/code&gt; 调用 &lt;code&gt;set-mark-command&lt;/code&gt; 。&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Lorem ipsum dolor sit amet
      ^ Cursor


      Point
      |
      Mark
      |
Lorem ipsum dolor sit amet
      ^ C-spc


      Mark          Point
      | ----region--|
      |             |
Lorem ipsum dolor sit amet
	 move       ^
	 forward -&amp;gt;


      Mark          Point
      | ----region--|
      |             |
Lorem ipsum dolor sit amet
		    ^
		    C-x C-x


      Point         Mark
      | ----region--|
      |             |
Lorem ipsum dolor sit amet

Point and mark interchanged
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org601daeb" class="outline-3"&gt;
&lt;h3 id="org601daeb"&gt;&lt;span class="section-number-3"&gt;3.2&lt;/span&gt; 使用 &lt;code&gt;region&lt;/code&gt; 进行重复性输入&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;p&gt;
对于 &lt;code&gt;region&lt;/code&gt; 相关的操作，通常是对已经存在的代码段进行编辑的，如果我们在输入之前就知道有许多字段是需要重复输入的，那么就可以在输入之前设置好 &lt;code&gt;mark&lt;/code&gt; ，对输入后形成的 &lt;code&gt;region&lt;/code&gt; 完成复制。这个技巧在特定情况能够很大地提升输入效率，但是我个人认为，想要在实战中完成这个操作，还需要保证非常清晰的思路。可以通过下面的示例感受这种操作带来的方便(示例截取自Paul的博文)。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://blog.wangzhl.com/assets/images/spinner.svg" data-src="/images/post-navigation-and-selection-effectively-in-emacs-1.gif" alt="nil"&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
下面给出了详细的操作解析&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class
      ^ C-spc =&amp;gt; Activate mark

class Foo
	  ^ M-w =&amp;gt; Foo has now been killed (copied)

class Foo extends React.Component&amp;lt;
				  ^ C-spc =&amp;gt; Activate mark

class Foo extends React.Component&amp;lt;
				  ^ C-y =&amp;gt; Yank (paste) Foo

class Foo extends React.Component&amp;lt;FooProps
					  ^ M-w =&amp;gt; FooProps has now been killed (copied)

class Foo extends React.Component&amp;lt;FooProps&amp;gt;

// Later
interface
	   ^ C-y =&amp;gt; Yank FooProps

interface FooProps {}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org83fec07" class="outline-3"&gt;
&lt;h3 id="org83fec07"&gt;&lt;span class="section-number-3"&gt;3.3&lt;/span&gt; 框选一个矩形的 &lt;code&gt;region&lt;/code&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-3"&gt;
&lt;p&gt;
使用 &lt;code&gt;rectangle-mark-mode&lt;/code&gt; 命令，默认快捷键 &lt;code&gt;C-x-SPC&lt;/code&gt; ，能够框选出一个矩形的 &lt;code&gt;region&lt;/code&gt; 。对于矩形 &lt;code&gt;region&lt;/code&gt; ，Paul给出的示例是复制 &lt;code&gt;dired&lt;/code&gt; 中的多个文件名称，貌似其他合适的使用场景不太多。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://blog.wangzhl.com/assets/images/spinner.svg" data-src="/images/post-navigation-and-selection-effectively-in-emacs-2.gif" alt="nil"&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org1b7c33a" class="outline-2"&gt;
&lt;h2 id="org1b7c33a"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; 其他插件支持&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
有些插件拓展能够实现光标的快速定位，如 &lt;a href="https://github.com/ShingoFukuyama/helm-swoop"&gt;helm-swoop&lt;/a&gt; 和 &lt;a href="https://github.com/abo-abo/avy"&gt;avy&lt;/a&gt; 。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0a3a46e" class="outline-3"&gt;
&lt;h3 id="org0a3a46e"&gt;&lt;span class="section-number-3"&gt;4.1&lt;/span&gt; helm swoop&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-1"&gt;
&lt;p&gt;
从我个人的使用体验来看 &lt;a href="https://github.com/ShingoFukuyama/helm-swoop"&gt;helm-swoop&lt;/a&gt; 和helm occur的功能十分相似，它们都提供了方便的关键词跳转功能。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
下面的图片来自helm swoop的 &lt;a href="https://github.com/ShingoFukuyama/helm-swoop"&gt;主页&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://blog.wangzhl.com/assets/images/spinner.svg" data-src="/images/post-navigation-and-selection-effectively-in-emacs-3.gif" alt="nil"&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd424000" class="outline-3"&gt;
&lt;h3 id="orgd424000"&gt;&lt;span class="section-number-3"&gt;4.2&lt;/span&gt; avy&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-2"&gt;
&lt;p&gt;
&lt;a href="https://github.com/abo-abo/avy"&gt;avy&lt;/a&gt; 的思路非常独特，这样的跳转和定位让我想起了Chrome浏览器中的Vimium插件，他允许我们使用更少的按键就能跳转到当前buffer中的任意位置，略微遗憾的是它只支持拉丁字母，不过在编写代码的大多数情况下是够用的。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
下面的图片来自Paul的博文&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://blog.wangzhl.com/assets/images/spinner.svg" data-src="/images/post-navigation-and-selection-effectively-in-emacs-4.gif" alt="nil"&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgc7887d1" class="outline-2"&gt;
&lt;h2 id="orgc7887d1"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; 参考资料&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://lorefnon.tech/2018/07/14/getting-productive-with-selection-and-navigation-in-emacs/"&gt;lorefnon.tech&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ShingoFukuyama/helm-swoop"&gt;helm-swoop&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/abo-abo/avy"&gt;avy&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><guid>https://blog.wangzhl.com/posts/2018/navigation-and-selection-effectively-in-emacs/</guid><pubDate>Mon, 30 Jul 2018 03:14:41 GMT</pubDate></item><item><title>使用emacs在目录中递归搜索字符串</title><link>https://blog.wangzhl.com/posts/2018/emacs-search-string-in-directory-recursively/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
对文件中的字符串搜索是开发中经常遇到的情景，下面就对常见的搜索字符串的方式进行了总结。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;对当前buffer进行搜索（单个文件）&lt;/b&gt;&lt;br&gt;
&lt;code&gt;C-s&lt;/code&gt; 向后搜索&lt;br&gt;
&lt;code&gt;C-r&lt;/code&gt; 向后搜索&lt;br&gt;
&lt;code&gt;M-s o&lt;/code&gt; 使用occur对当前buffer中的指定关键字进行统计&lt;br&gt;
在安装了helm以后可以使用 &lt;code&gt;helm-occur&lt;/code&gt; 完成当前buffer的搜索&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;对目录中的指定文件进行搜索（一个目录下的多个文件）&lt;/b&gt;&lt;br&gt;
&lt;code&gt;C-x d&lt;/code&gt; 进入dired模式，在dired模式中使用 &lt;code&gt;M-x &amp;lt;dired-do-find-regexp&amp;gt;&lt;/code&gt; (快捷键 &lt;code&gt;A&lt;/code&gt; )对标记的文件进行搜索。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;对目录中的所有文件进行递归搜索（一个目录下的所有文件和所有子目录中的文件）&lt;/b&gt;&lt;br&gt;
&lt;code&gt;M-x &amp;lt;rgrep&amp;gt;&lt;/code&gt; 能够对一个目录下所有的文件进行正则表达式匹配&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;注意事项&lt;/b&gt;&lt;br&gt;
在windows平台上使用grep和find指令时，需要借助仿linux环境中的程序完成，如cygwin中的程序。&lt;br&gt;
需要将程序的路径添加到系统环境变量path中，并且为了覆盖windows系统自带的find命令，需要将该路径放在系统find路径之前。&lt;br&gt;
tips： 对于安装了 &lt;code&gt;git bash&lt;/code&gt; 的同学，直接将其中的 &lt;code&gt;mingw64\bin&lt;/code&gt; 的绝对路径加入系统path中即可。&lt;br&gt;
&lt;/p&gt;</description><category>emacs</category><category>grep</category><guid>https://blog.wangzhl.com/posts/2018/emacs-search-string-in-directory-recursively/</guid><pubDate>Tue, 06 Feb 2018 13:28:14 GMT</pubDate></item><item><title>使用emacs查找替换指定目录所有文件中字符串</title><link>https://blog.wangzhl.com/posts/2018/emacs-find-replace-string-in-directory/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
本文主要介绍在emacs中对一个目录中的很多文件进行字符串查找和替换操作的方法。参考了 &lt;a href="http://ergoemacs.org/emacs/blog.html"&gt;XahLee&lt;/a&gt; 的教程后，在此记录做个备份。&lt;br&gt;
&lt;/p&gt;
&lt;div id="outline-container-orgde6d251" class="outline-2"&gt;
&lt;h2 id="orgde6d251"&gt;操作步骤&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgde6d251"&gt;
&lt;p&gt;
&lt;b&gt;进入dired模式&lt;/b&gt; ： 我的快捷键配置为 &lt;code&gt;C-x d&lt;/code&gt;, 也可以使用 &lt;code&gt;M-x &amp;lt;dired&amp;gt;&lt;/code&gt; .&lt;br&gt;
&lt;b&gt;标记需要查找的文件&lt;/b&gt; ： 在进入dired模式后，对需要操作的文件或目录进行操作。&lt;br&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt; 对光标所在的文件或目录进行标记&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u&lt;/code&gt; 对光标所在的文件或目录取消标记&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;U&lt;/code&gt; 取消所有标记&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
可以通过 &lt;code&gt;M-x &amp;lt;dired-mark-files-regexp&amp;gt;&lt;/code&gt; 使用正则表达式完成批量文件增加标记。&lt;br&gt;
&lt;b&gt;批量查找&lt;/b&gt; ： 使用 &lt;code&gt;M-x &amp;lt;dired-do-query-replace-regexp&amp;gt;&lt;/code&gt; 进行查找替换。在有 &lt;code&gt;grep&lt;/code&gt; 的支持时（linux环境下或windows环境中增加了类似cygwin的程序），也可以使用 &lt;code&gt;&amp;lt;dired-do-find-regexp-and-replace&amp;gt;&lt;/code&gt; 进行文本查找替换。&lt;br&gt;
&lt;b&gt;查找结果&lt;/b&gt; ： 在查找结果中使用如下快捷键完成操作&lt;br&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; 对当前记录执行替换操作&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; 跳过当前记录&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-g&lt;/code&gt; 停止本次查找替换操作&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!&lt;/code&gt; 同意本文件中的查找替换操作&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N&lt;/code&gt; 跳过本文件中的查找替换操作&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Y&lt;/code&gt; 同意本次所有的查找替换操作&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org845c23f" class="outline-2"&gt;
&lt;h2 id="org845c23f"&gt;相关技巧&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org845c23f"&gt;
&lt;p&gt;
如果需要批量查找(不进行替换)，可以在dired模式中 &lt;code&gt;M-x &amp;lt;dired-do-search&amp;gt;&lt;/code&gt; 进行查找，对于查找结果使用 &lt;code&gt;M-x tags-loop-continue&lt;/code&gt; 进行逐条浏览。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>dired</category><category>emacs</category><guid>https://blog.wangzhl.com/posts/2018/emacs-find-replace-string-in-directory/</guid><pubDate>Wed, 17 Jan 2018 02:18:46 GMT</pubDate></item><item><title>在emacs中使用GNU Global的配置指南</title><link>https://blog.wangzhl.com/posts/2018/emacs-global-gtags-guide/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div id="outline-container-orgcfb882e" class="outline-2"&gt;
&lt;h2 id="orgcfb882e"&gt;1 引言&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcfb882e"&gt;
&lt;p&gt;
本文主要针对emacs中的global的配置和使用方法做了简要介绍。global是代码标签化索引工具，能够在许多源码中快速定位函数的实现位置。我主要使用global来辅助代码跳转；还有一种用法是用来辅助代码补全，目前正在研究中。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/2018/emacs-global-gtags-guide/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>global</category><category>gtags</category><guid>https://blog.wangzhl.com/posts/2018/emacs-global-gtags-guide/</guid><pubDate>Tue, 02 Jan 2018 15:47:05 GMT</pubDate></item></channel></rss>