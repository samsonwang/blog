<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about cpp)</title><link>https://blog.wangzhl.com/</link><description></description><atom:link href="https://blog.wangzhl.com/tags/category-cpp.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2021 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;
&lt;img alt="cc-by-nc 4.0" style="padding-bottom:2px" src="/images/cc-by-nc.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Tue, 16 Mar 2021 09:20:18 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>静态初始化顺序问题</title><link>https://blog.wangzhl.com/posts/static-initialization-order-problem/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文介绍了静态变量构造顺序和析构顺序所带来的一系列问题，由于这些问题的出现条件都比较特殊，它们在使用中常常会被忽略。但是在设计和开发中这些问题却是不可忽略的，最严重的可能导致程序崩溃。在开发时注意了这些问题后，你的代码会更加稳健。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/static-initialization-order-problem/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>singleton</category><category>static</category><guid>https://blog.wangzhl.com/posts/static-initialization-order-problem/</guid><pubDate>Wed, 21 Oct 2020 14:54:26 GMT</pubDate></item><item><title>char类型的符号特性</title><link>https://blog.wangzhl.com/posts/signed-char-and-unsigned-char/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在C++中 &lt;code&gt;char&lt;/code&gt; 类型用来表示字符，其数据宽度为一个字节，通常也可以将 &lt;code&gt;char&lt;/code&gt; 用作占一个字节的整数。但整数类型又分为无符号整数和有符号整数，对于具有相同数据宽度的有符号整数和无符号整数，它们的允许的取值范围是不同的。在将 &lt;code&gt;char&lt;/code&gt; 当作整型数据使用时，要格外注意其符号特性。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/signed-char-and-unsigned-char/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>char</category><category>cpp</category><category>signed</category><category>unsigned</category><guid>https://blog.wangzhl.com/posts/signed-char-and-unsigned-char/</guid><pubDate>Mon, 28 Sep 2020 14:45:18 GMT</pubDate></item><item><title>C++11中的内存顺序</title><link>https://blog.wangzhl.com/posts/cpp11-memory-model/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在C++11中引入了内存顺序(memory order)这一概念，我查阅资料进行了一番研究，把认为有用的知识点整理记录下来，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/cpp11-memory-model/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>atomic</category><category>cpp</category><category>cpp11</category><category>memory order</category><guid>https://blog.wangzhl.com/posts/cpp11-memory-model/</guid><pubDate>Tue, 23 Jun 2020 01:13:12 GMT</pubDate></item><item><title>在C++智能指针中使用自定义的deleter</title><link>https://blog.wangzhl.com/posts/self-defined-deleter-in-cpp-smart-pointer/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在最近的开发中，我使用了智能指针来管理一个动态申请的对象，但是这个对象需要调用特定的函数完成内存释放。以编程的专业术语来讲，就是为智能指针提供一个自定义的deleter。我很好奇的是，这个自定义资源回收函数是否需要在入口处对参数进行空指针检查呢？&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/self-defined-deleter-in-cpp-smart-pointer/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>defer</category><category>deleter</category><category>smart pointer</category><guid>https://blog.wangzhl.com/posts/self-defined-deleter-in-cpp-smart-pointer/</guid><pubDate>Thu, 11 Jun 2020 05:37:16 GMT</pubDate></item><item><title>栈溢出问题和chkstk</title><link>https://blog.wangzhl.com/posts/stackoverflow-and-chkstk/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在调试程序时遇到了一个栈溢出的问题，栈溢出通常是由程序错误引起的，通过修正程序的bug就能解决问题。但是这次的栈溢出，从代码上看并没有错误，经过一番排查和调试，我找到了解决问题的方法，同时也加深了对操作系统中一些概念的理解。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/stackoverflow-and-chkstk/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>chkstk</category><category>cpp</category><category>stack overflow</category><category>windows</category><guid>https://blog.wangzhl.com/posts/stackoverflow-and-chkstk/</guid><pubDate>Sun, 10 May 2020 06:08:32 GMT</pubDate></item><item><title>文件操作函数接口的比较</title><link>https://blog.wangzhl.com/posts/fopen-api-compare/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在维护一个老项目时发现，该程序的日志在程序运行时是不能够被其他程序打开的，也就不能通过日志实时地观察程序的运行状态。在我的印象里，我一直认为打开的文件都是共享的，这应该是个错觉。本篇日志主要总结了在打开一个文件时所使用函数接口，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/fopen-api-compare/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>c11</category><category>cpp</category><category>cpp11</category><category>file</category><category>windows</category><guid>https://blog.wangzhl.com/posts/fopen-api-compare/</guid><pubDate>Thu, 19 Dec 2019 14:08:11 GMT</pubDate></item><item><title>C语言中数组地址的特性</title><link>https://blog.wangzhl.com/posts/c-array-address-tips/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在开发中使用到了C风格的数组，在对数组地址进行增减操作时有些疑惑，现在将这些要点总结下来，方便查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/c-array-address-tips/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>array</category><category>c</category><category>cpp</category><guid>https://blog.wangzhl.com/posts/c-array-address-tips/</guid><pubDate>Wed, 30 Oct 2019 08:51:42 GMT</pubDate></item><item><title>MSVC工程里Unicode字符集和多字节字符集选项</title><link>https://blog.wangzhl.com/posts/msvc-cpp-project-unicode-and-mbcs/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在Visual Studio的C++工程中，有个一选项可以设置当前工程的字符集，本文主要围绕着该设置置项展开。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/msvc-cpp-project-unicode-and-mbcs/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>charset</category><category>cpp</category><category>MBCS</category><category>unicode</category><category>windows</category><guid>https://blog.wangzhl.com/posts/msvc-cpp-project-unicode-and-mbcs/</guid><pubDate>Tue, 15 Oct 2019 12:44:03 GMT</pubDate></item><item><title>排查Windows平台动态库和静态库链接失败问题</title><link>https://blog.wangzhl.com/posts/library-linking-error-on-windows/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近帮同事查了一个C++链接过程的问题，这个问题比较隐蔽，也非常有代表性，记录下来方便后面查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/library-linking-error-on-windows/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>dumpbin</category><category>linking</category><category>windows</category><guid>https://blog.wangzhl.com/posts/library-linking-error-on-windows/</guid><pubDate>Sun, 22 Sep 2019 02:22:09 GMT</pubDate></item><item><title>C++中delete关键字常见错误</title><link>https://blog.wangzhl.com/posts/cpp-delete-keyword-common-mistakes/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
C++中的delete关键字用于释放动态申请的内存，是使用频率非常高的关键字，本文将开发中常出现的错误加以总结，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/cpp-delete-keyword-common-mistakes/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>delete</category><guid>https://blog.wangzhl.com/posts/cpp-delete-keyword-common-mistakes/</guid><pubDate>Mon, 01 Jul 2019 12:36:31 GMT</pubDate></item></channel></rss>