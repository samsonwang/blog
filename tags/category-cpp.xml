<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about cpp)</title><link>https://blog.wangzhl.com/</link><description></description><atom:link href="https://blog.wangzhl.com/tags/category-cpp.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2024 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;
&lt;img alt="cc-by-nc 4.0" style="padding-bottom:2px" src="/images/cc-by-nc.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Thu, 18 Jan 2024 09:54:43 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>在C++中使用有符号数作为容器下标</title><link>https://blog.wangzhl.com/posts/2023/cpp_signed_subscript/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在C++20中引入了 &lt;code&gt;std::span&lt;/code&gt; 特性，针对容器下标和容器大小该使用有符号数 &lt;code&gt;signed&lt;/code&gt; 还是无符号数 &lt;code&gt;unsigned&lt;/code&gt; ，大家开始讨论。综合来看，在旧标准的设计中使用无符号数作为容器下标是有历史原因的；但是在后来的使用中也发现了许多弊端。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
最终，在C++20标准下 &lt;code&gt;std::span&lt;/code&gt; 仍然使用了无符号数作为大小和下标类型。但是讨论的过程很有意思，也让我在后续的开发中思考有符号数和无符号数的使用。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/2023/cpp_signed_subscript/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><guid>https://blog.wangzhl.com/posts/2023/cpp_signed_subscript/</guid><pubDate>Tue, 22 Aug 2023 09:15:49 GMT</pubDate></item><item><title>结构体字节对齐的陷阱</title><link>https://blog.wangzhl.com/posts/2021/cpp-pragma-pack-pitfall/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;code&gt;pragma pack&lt;/code&gt; 的功能是设定结构体内成员变量的字节对齐方式。它在使用时有一个易错点，而且出错后排查起来还非常不容易。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/2021/cpp-pragma-pack-pitfall/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>cpp</category><guid>https://blog.wangzhl.com/posts/2021/cpp-pragma-pack-pitfall/</guid><pubDate>Tue, 16 Nov 2021 03:27:35 GMT</pubDate></item><item><title>在运行时获取动态库的路径</title><link>https://blog.wangzhl.com/posts/2021/get-runtime-dll-path/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在开发一个动态库，这个动态库需要在运行时动态地加载另一个动态库。在库发布时会同时提供这两个动态库。库的使用者会主动加载第一个动态库，问题出现在第一个动态库加载第二个动态库时，如何确定第二个动态库的位置。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/2021/get-runtime-dll-path/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>cpp</category><category>linux</category><category>windows</category><guid>https://blog.wangzhl.com/posts/2021/get-runtime-dll-path/</guid><pubDate>Fri, 11 Jun 2021 10:19:06 GMT</pubDate></item><item><title>C++头文件的引用顺序</title><link>https://blog.wangzhl.com/posts/2021/cpp-header-include-sequence/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
一般在C++开发中，会使用头文件（ &lt;code&gt;.h/hpp&lt;/code&gt; ）和源文件（ &lt;code&gt;.cpp/cxx&lt;/code&gt; ）将函数的声明和实现分开。当需要使用某个函数时，将声明函数所在的头文件引用进来即可。在较复杂的项目中会引用很多头文件，这些头文件可能来自于标准库、操作系统相关库、第三方库和自身项目。在实际开发过程中，多个头文件的引用顺序通常并不会有很大的影响；但是从编码风格和项目维护等方面考虑，头文件的引用顺序确是值得注意的。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/2021/cpp-header-include-sequence/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><guid>https://blog.wangzhl.com/posts/2021/cpp-header-include-sequence/</guid><pubDate>Fri, 28 May 2021 13:37:57 GMT</pubDate></item><item><title>静态初始化顺序问题</title><link>https://blog.wangzhl.com/posts/2020/static-initialization-order-problem/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文介绍了静态变量构造顺序和析构顺序所带来的一系列问题，由于这些问题的出现条件都比较特殊，它们在使用中常常会被忽略。但是在设计和开发中这些问题却是不可忽略的，最严重的可能导致程序崩溃。在开发时注意了这些问题后，你的代码会更加稳健。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/2020/static-initialization-order-problem/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>singleton</category><category>static</category><guid>https://blog.wangzhl.com/posts/2020/static-initialization-order-problem/</guid><pubDate>Wed, 21 Oct 2020 14:54:26 GMT</pubDate></item><item><title>char类型的符号特性</title><link>https://blog.wangzhl.com/posts/2020/signed-char-and-unsigned-char/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在C++中 &lt;code&gt;char&lt;/code&gt; 类型用来表示字符，其数据宽度为一个字节，通常也可以将 &lt;code&gt;char&lt;/code&gt; 用作占一个字节的整数。但整数类型又分为无符号整数和有符号整数，对于具有相同数据宽度的有符号整数和无符号整数，它们的允许的取值范围是不同的。在将 &lt;code&gt;char&lt;/code&gt; 当作整型数据使用时，要格外注意其符号特性。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/2020/signed-char-and-unsigned-char/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>char</category><category>cpp</category><category>signed</category><category>unsigned</category><guid>https://blog.wangzhl.com/posts/2020/signed-char-and-unsigned-char/</guid><pubDate>Mon, 28 Sep 2020 14:45:18 GMT</pubDate></item><item><title>C++11中的内存顺序</title><link>https://blog.wangzhl.com/posts/2020/cpp11-memory-model/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在C++11中引入了内存顺序(memory order)这一概念，我查阅资料进行了一番研究，把认为有用的知识点整理记录下来，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/2020/cpp11-memory-model/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>atomic</category><category>cpp</category><category>cpp11</category><category>memory order</category><guid>https://blog.wangzhl.com/posts/2020/cpp11-memory-model/</guid><pubDate>Tue, 23 Jun 2020 01:13:12 GMT</pubDate></item><item><title>在C++智能指针中使用自定义的deleter</title><link>https://blog.wangzhl.com/posts/2020/self-defined-deleter-in-cpp-smart-pointer/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在最近的开发中，我使用了智能指针来管理一个动态申请的对象，但是这个对象需要调用特定的函数完成内存释放。以编程的专业术语来讲，就是为智能指针提供一个自定义的deleter。我很好奇的是，这个自定义资源回收函数是否需要在入口处对参数进行空指针检查呢？&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/2020/self-defined-deleter-in-cpp-smart-pointer/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>defer</category><category>deleter</category><category>smart pointer</category><guid>https://blog.wangzhl.com/posts/2020/self-defined-deleter-in-cpp-smart-pointer/</guid><pubDate>Thu, 11 Jun 2020 05:37:16 GMT</pubDate></item><item><title>栈溢出问题和chkstk</title><link>https://blog.wangzhl.com/posts/2020/stackoverflow-and-chkstk/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在调试程序时遇到了一个栈溢出的问题，栈溢出通常是由程序错误引起的，通过修正程序的bug就能解决问题。但是这次的栈溢出，从代码上看并没有错误，经过一番排查和调试，我找到了解决问题的方法，同时也加深了对操作系统中一些概念的理解。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/2020/stackoverflow-and-chkstk/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>chkstk</category><category>cpp</category><category>stack overflow</category><category>windows</category><guid>https://blog.wangzhl.com/posts/2020/stackoverflow-and-chkstk/</guid><pubDate>Sun, 10 May 2020 06:08:32 GMT</pubDate></item><item><title>文件操作函数接口的比较</title><link>https://blog.wangzhl.com/posts/2019/fopen-api-compare/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在维护一个老项目时发现，该程序的日志在程序运行时是不能够被其他程序打开的，也就不能通过日志实时地观察程序的运行状态。在我的印象里，我一直认为打开的文件都是共享的，这应该是个错觉。本篇日志主要总结了在打开一个文件时所使用函数接口，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/2019/fopen-api-compare/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>c11</category><category>cpp</category><category>cpp11</category><category>file</category><category>windows</category><guid>https://blog.wangzhl.com/posts/2019/fopen-api-compare/</guid><pubDate>Thu, 19 Dec 2019 14:08:11 GMT</pubDate></item></channel></rss>