<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/blog/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about cpp)</title><link>https://samsonwang.github.io/blog/</link><description></description><atom:link href="https://samsonwang.github.io/blog/tags/category-cpp.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2020 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;&lt;img alt="知识共享许可协议" style="padding-bottom:2px" src="https://i.creativecommons.org/l/by-nc/4.0/80x15.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Wed, 08 Jan 2020 01:59:10 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>文件操作函数接口的比较</title><link>https://samsonwang.github.io/blog/posts/fopen-api-compare/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在维护一个老项目时发现，该程序的日志在程序运行时是不能够被其他程序打开的，也就不能通过日志实时地观察程序的运行状态。在我的印象里，我一直认为打开的文件都是共享的，这应该是个错觉。本篇日志主要总结了在打开一个文件时所使用函数接口，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/fopen-api-compare/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>c11</category><category>cpp</category><category>cpp11</category><category>file</category><category>windows</category><guid>https://samsonwang.github.io/blog/posts/fopen-api-compare/</guid><pubDate>Thu, 19 Dec 2019 14:08:11 GMT</pubDate></item><item><title>C语言中数组地址的特性</title><link>https://samsonwang.github.io/blog/posts/c-array-address-tips/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在开发中使用到了C风格的数组，在对数组地址进行增减操作时有些疑惑，现在将这些要点总结下来，方便查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/c-array-address-tips/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>array</category><category>c</category><category>cpp</category><guid>https://samsonwang.github.io/blog/posts/c-array-address-tips/</guid><pubDate>Wed, 30 Oct 2019 08:51:42 GMT</pubDate></item><item><title>MSVC工程里Unicode字符集和多字节字符集选项</title><link>https://samsonwang.github.io/blog/posts/msvc-cpp-project-unicode-and-mbcs/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在Visual Studio的C++工程中，有个一选项可以设置当前工程的字符集，本文主要围绕着该设置置项展开。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/msvc-cpp-project-unicode-and-mbcs/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>charset</category><category>cpp</category><category>MBCS</category><category>unicode</category><category>windows</category><guid>https://samsonwang.github.io/blog/posts/msvc-cpp-project-unicode-and-mbcs/</guid><pubDate>Tue, 15 Oct 2019 12:44:03 GMT</pubDate></item><item><title>排查Windows平台动态库和静态库链接失败问题</title><link>https://samsonwang.github.io/blog/posts/library-linking-error-on-windows/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近帮同事查了一个C++链接过程的问题，这个问题比较隐蔽，也非常有代表性，记录下来方便后面查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/library-linking-error-on-windows/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>dumpbin</category><category>linking</category><category>windows</category><guid>https://samsonwang.github.io/blog/posts/library-linking-error-on-windows/</guid><pubDate>Sun, 22 Sep 2019 02:22:09 GMT</pubDate></item><item><title>C++中delete关键字常见错误</title><link>https://samsonwang.github.io/blog/posts/cpp-delete-keyword-common-mistakes/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
C++中的delete关键字用于释放动态申请的内存，是使用频率非常高的关键字，本文将开发中常出现的错误加以总结，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/cpp-delete-keyword-common-mistakes/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>delete</category><guid>https://samsonwang.github.io/blog/posts/cpp-delete-keyword-common-mistakes/</guid><pubDate>Mon, 01 Jul 2019 12:36:31 GMT</pubDate></item><item><title>位域与联合体的内存布局</title><link>https://samsonwang.github.io/blog/posts/bit-field-and-union-type/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
位域（bit field）与联合体（union）都可以用来控制内存布局。本文主要阐述的内存可总结为：位域的内存布局是编译器决定的，而联合体的内存布局是由大小端决定的。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/bit-field-and-union-type/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>bit field</category><category>c</category><category>cpp</category><category>endian</category><category>memory layout</category><category>union</category><guid>https://samsonwang.github.io/blog/posts/bit-field-and-union-type/</guid><pubDate>Tue, 21 May 2019 08:35:02 GMT</pubDate></item><item><title>深入探索C++内存模型（4）</title><link>https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-4/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
第四章是Function语意学，这一章主要介绍类相关函数的底层实现原理，就虚函数进行了展开讨论，通过实际代码的测试结果验证分析结论。对 inline 函数可能会出现的问题进行了分析，对 inline 函数的使用提出了指导意见。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-4/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>digest</category><category>Lippman</category><category>memory layout</category><category>object model</category><guid>https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-4/</guid><pubDate>Mon, 22 Apr 2019 02:27:22 GMT</pubDate></item><item><title>深入探索C++内存模型（3）</title><link>https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-3/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
第三章的标题是Data语意学，这一章主要的研究对象是类的成员变量相关的操作原理，静态成员变量与非静态成员变量，单一继承、多重继承、虚继承对成员变量内存分布和存取性能的影响。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-3/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>digest</category><category>Lippman</category><category>memory layout</category><category>object model</category><guid>https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-3/</guid><pubDate>Fri, 12 Apr 2019 05:13:16 GMT</pubDate></item><item><title>深入探索C++内存模型（2）</title><link>https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-2/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
构造函语意学是本书的第二章，这一章节主要针对构造函数在不同情况的底层实现细节进行的全面的讨论。阐述了在类对象（class object）的构造期间，编译器进行的额外操作的原理。针对默认构造函数（default constructor）和拷贝构造函数（copy constructor）分别展开了细致的讨论，引出了编译器 NRV 优化的概念，揭示了成员初始化列表的作用机理。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-2/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>digest</category><category>Lippman</category><category>memory layout</category><category>object model</category><guid>https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-2/</guid><pubDate>Mon, 25 Mar 2019 07:52:36 GMT</pubDate></item><item><title>深入探索C++内存模型（1）</title><link>https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-1/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近花时间读了一下《深入探索C++内存模型》，这本带我了解到了更底层的C++知识。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
这本书从C++语言各种特性的实现机制上进行细致剖析，进而总结出对软件开发具有指导意义的经验和结论。这本书的目标群体是具有开发经验的中高级开发人员，其内容的专业性是不容质疑的。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
从我的阅读感受上讲，它相对比那些一般的技术文档要耗时耗力。全书共三百多页，粗略地估算了一下，我却用了一个月的空余时间才读完。我会将读书笔记整理成博文，这样能够加深记忆，也方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-1/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>digest</category><category>Lippman</category><category>memory layout</category><category>object model</category><guid>https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-1/</guid><pubDate>Mon, 11 Mar 2019 02:30:13 GMT</pubDate></item></channel></rss>