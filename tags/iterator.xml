<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about iterator)</title><link>https://blog.wangzhl.com/</link><description></description><atom:link href="https://blog.wangzhl.com/tags/iterator.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2021 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;
&lt;img alt="cc-by-nc 4.0" style="padding-bottom:2px" src="/images/cc-by-nc.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Tue, 22 Jun 2021 02:09:49 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>使用迭代器和下标访问C++容器的比较</title><link>https://blog.wangzhl.com/posts/cpp-access-container-by-iterator-or-position/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在遍历一个STL数组容器（ &lt;code&gt;vector&lt;/code&gt; ）时，可以使用迭代器方式，也可以使用下标（索引）方式。迭代器提供了一个非常方便的访问容器元素的方式，有一种行为（behavioral）设计模式就叫做迭代器模式，这种设计模式提供复杂数据结构的顺序遍历方法，同时不会暴露内部数据结构的细节。下标访问是从C语言数组传承而来的，C++标准库的数组容器也同时提供了下标访问的操作符重载。本文从运行效率和代码风格两方面比较了二者的差异。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/cpp-access-container-by-iterator-or-position/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>iterator</category><guid>https://blog.wangzhl.com/posts/cpp-access-container-by-iterator-or-position/</guid><pubDate>Fri, 09 Oct 2020 08:25:52 GMT</pubDate></item></channel></rss>