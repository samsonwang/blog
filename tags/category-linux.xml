<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/blog/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about linux)</title><link>https://samsonwang.github.io/blog/</link><description></description><atom:link href="https://samsonwang.github.io/blog/tags/category-linux.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2019 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;&lt;img alt="知识共享许可协议" style="padding-bottom:2px" src="https://i.creativecommons.org/l/by-nc/4.0/80x15.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Fri, 22 Nov 2019 10:24:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>linux中修改程序的run path</title><link>https://samsonwang.github.io/blog/posts/linux-change-run-path-for-executable/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
对于动态库的加载，不同的操作系统有不同的策略。在windows下，程序会优先加载同路径中的动态库，这是一个非常方便的特性。而在linux下，需要单独配置 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; 以实现上述特性。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
在开发linux程序中，曾经困扰我很长一段时间的是动态库的加载问题，最常出现的问题是找不到所需要的动态库。在得知修改run path可以调整程序查找动态库的路径时，一切都迎刃而且了。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/linux-change-run-path-for-executable/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>chrpath</category><category>elf</category><category>linux</category><category>rpath</category><guid>https://samsonwang.github.io/blog/posts/linux-change-run-path-for-executable/</guid><pubDate>Fri, 22 Nov 2019 06:41:48 GMT</pubDate></item><item><title>在linux的信号处理函数中不要进行锁相关操作</title><link>https://samsonwang.github.io/blog/posts/linux-signal-handler-callback-mutex/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在写一个linux程序，其中一个逻辑是要等待信号（signal），我使用了条件变量（condition variable）来完成这个操作，但是实际效果却是整个程序卡住了，经过查阅资料后得知在信号处理函数中是不能进行锁操作的。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/linux-signal-handler-callback-mutex/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>mutex</category><category>signal handler</category><category>sigtimedwait</category><category>sigwait</category><guid>https://samsonwang.github.io/blog/posts/linux-signal-handler-callback-mutex/</guid><pubDate>Sat, 26 Oct 2019 13:41:50 GMT</pubDate></item><item><title>在gdb中以16进程的方式打印变量</title><link>https://samsonwang.github.io/blog/posts/gdb-print-variable-in-hex/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在gdb调试过程中可以通过 &lt;code&gt;print(p)&lt;/code&gt; 查看指定变量的内容。在默认情况下，数字是以10进制的形式显示的，但有时候我们想以16进制的形式查看该变量。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/gdb-print-variable-in-hex/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>gdb</category><category>linux</category><guid>https://samsonwang.github.io/blog/posts/gdb-print-variable-in-hex/</guid><pubDate>Sat, 12 Oct 2019 15:31:57 GMT</pubDate></item><item><title>Makefile 要点备忘</title><link>https://samsonwang.github.io/blog/posts/makefile_cheatsheet/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文包含常用的 Makefile 语法，在这里总结一下，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/makefile_cheatsheet/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cheatsheet</category><category>makefile</category><category>not-index</category><guid>https://samsonwang.github.io/blog/posts/makefile_cheatsheet/</guid><pubDate>Sun, 28 Apr 2019 02:06:38 GMT</pubDate></item><item><title>在Linux终端中进行递归搜索</title><link>https://samsonwang.github.io/blog/posts/linux-command-examples-grep-and-find/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
有时候我们需要对某个目录中的所有文件进行递归式搜索。递归搜索，即搜索该目录中的所有文件和其二级目录下的所有文件，依此类推。本文给出了两种实现思路，分别使用 &lt;code&gt;grep&lt;/code&gt; 和 &lt;code&gt;find&lt;/code&gt; 命令。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/linux-command-examples-grep-and-find/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>find</category><category>grep</category><category>linux</category><category>search</category><guid>https://samsonwang.github.io/blog/posts/linux-command-examples-grep-and-find/</guid><pubDate>Thu, 11 Apr 2019 05:47:28 GMT</pubDate></item><item><title>Tips on Linux Process and Subprocess</title><link>https://samsonwang.github.io/blog/posts/linux-process-and-subprocess/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
Here are some tips on Linux process and subprocess, such as orphan process, zombie process, process exit and close on exec flag.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/linux-process-and-subprocess/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>en</category><category>linux</category><category>process</category><guid>https://samsonwang.github.io/blog/posts/linux-process-and-subprocess/</guid><pubDate>Fri, 25 Jan 2019 08:50:23 GMT</pubDate></item><item><title>Linux系统errno速查表</title><link>https://samsonwang.github.io/blog/posts/linux-errno-cheatsheet/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
Linux系统errno数字和含义的对应关系，类似的资料很容易就能在网上找到，这里做一个备份方便日后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/linux-errno-cheatsheet/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>errno</category><category>linux</category><category>not-index</category><guid>https://samsonwang.github.io/blog/posts/linux-errno-cheatsheet/</guid><pubDate>Wed, 23 Jan 2019 03:23:49 GMT</pubDate></item><item><title>fork和vfork的区别</title><link>https://samsonwang.github.io/blog/posts/fork-and-vfork/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
fork和vfork都是用来创建子进程的系统调用函数，本文主要对比了二者的区别。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/fork-and-vfork/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>fork</category><category>linux</category><category>posix</category><category>process</category><category>vfork</category><guid>https://samsonwang.github.io/blog/posts/fork-and-vfork/</guid><pubDate>Wed, 16 Jan 2019 01:05:13 GMT</pubDate></item><item><title>[转]Linux 技巧：让进程在后台可靠运行的几种方法</title><link>https://samsonwang.github.io/blog/posts/linux-run-program-nohup/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
我们经常会碰到这样的问题，用 telnet/ssh 登录了远程的 Linux 服务器，运行了一些耗时较长的任务， 结果却由于网络的不稳定导致任务中途失败。如何让命令提交后不受本地关闭终端窗口/网络断开连接的干扰呢？下面举了一些例子， 您可以针对不同的场景选择不同的方式来处理这个问题。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/linux-run-program-nohup/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>disown</category><category>linux</category><category>nohup</category><category>screen</category><category>setsid</category><guid>https://samsonwang.github.io/blog/posts/linux-run-program-nohup/</guid><pubDate>Sun, 28 Oct 2018 10:19:42 GMT</pubDate></item><item><title>gdb图形化调试</title><link>https://samsonwang.github.io/blog/posts/debug-with-gdb-gui/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
gdb是linux下很强大的调试工具，它使用命令行进行交互。相比于windows下visual studio的图形化调试界面，gdb的命令行方式操作起来不是很方便，从用户友好度上二者难以相提并论。不过gdb也有许多配套的前端组件，提供了图形化界面展示调试过程中的信息，这样就比传统命令行方式要方便很多。本文介绍了使用图形化的gdb前端让调试变得便捷高效，建议再阅读本文之前先掌握一些gdb的基础知识。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/debug-with-gdb-gui/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>gdb</category><category>linux</category><guid>https://samsonwang.github.io/blog/posts/debug-with-gdb-gui/</guid><pubDate>Thu, 18 Oct 2018 01:45:14 GMT</pubDate></item></channel></rss>