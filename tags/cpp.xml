<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about cpp)</title><link>https://blog.wangzhl.com/</link><description></description><atom:link href="https://blog.wangzhl.com/tags/cpp.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2020 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;
&lt;img alt="cc-by-nc 4.0" style="padding-bottom:2px" src="/images/cc-by-nc.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Fri, 12 Jun 2020 08:35:19 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>在C++智能指针中使用自定义的deleter</title><link>https://blog.wangzhl.com/posts/self-defined-deleter-in-cpp-smart-pointer/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在最近的开发中，我使用了智能指针来管理一个对象，但是这个对象需要调用特定的函数完成内存释放。用编程的专业术语来讲，就是为智能指针提供一个自定义的deleter。我很好奇的是，这个自定义资源回收函数是否需要在入口处对参数进行空指针检查呢？&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/self-defined-deleter-in-cpp-smart-pointer/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>defer</category><category>deleter</category><category>smart pointer</category><guid>https://blog.wangzhl.com/posts/self-defined-deleter-in-cpp-smart-pointer/</guid><pubDate>Thu, 11 Jun 2020 05:37:16 GMT</pubDate></item><item><title>栈溢出问题和chkstk</title><link>https://blog.wangzhl.com/posts/stackoverflow-and-chkstk/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在调试程序时遇到了一个栈溢出的问题，栈溢出通常是由程序错误引起的，通过修正程序的bug就能解决问题。但是这次的栈溢出，从代码上看并没有错误，经过一番排查和调试，我找到了解决问题的方法，同时也加深了对操作系统中一些概念的理解。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/stackoverflow-and-chkstk/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>chkstk</category><category>cpp</category><category>stack overflow</category><category>windows</category><guid>https://blog.wangzhl.com/posts/stackoverflow-and-chkstk/</guid><pubDate>Sun, 10 May 2020 06:08:32 GMT</pubDate></item><item><title>MSVC的stdio版本适配问题</title><link>https://blog.wangzhl.com/posts/msvc-legacy-stdio/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
windows系统的向下兼容性一直是做的比较好的，一些老旧软件不需要修改就能跑在最新版的windows上。这篇文章主要讨论的是库（library）的向下兼容性，在开发中某些库可能是由较老的编译器生成的，当使用新版本的编译器进行链接时可能需要对stdio相关库进行适配。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/msvc-legacy-stdio/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>cpp</category><category>msvc</category><category>ucrt</category><category>vcrt</category><category>windows</category><guid>https://blog.wangzhl.com/posts/msvc-legacy-stdio/</guid><pubDate>Sun, 03 May 2020 01:54:38 GMT</pubDate></item><item><title>如何实现一个定时器</title><link>https://blog.wangzhl.com/posts/how-to-implement-a-timer/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在以前的一次面试中，我被问到该如何实现一个定时器，当时我并没有思考过这个问题，所以回答的并不令人满意。在日常的开发中，一个需要定时执行的任务是很常见的。我认为这个问题比较有意义，也非常具有代表性。于是，我查阅了一些资料，并整理出这篇博客。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/how-to-implement-a-timer/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>alarm</category><category>c</category><category>cpp</category><category>linux</category><category>signal</category><category>timer</category><category>timerfd</category><guid>https://blog.wangzhl.com/posts/how-to-implement-a-timer/</guid><pubDate>Sat, 11 Apr 2020 01:10:09 GMT</pubDate></item><item><title>Qt程序中OLE错误的调试记录</title><link>https://blog.wangzhl.com/posts/debug-qt-ole-error/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近解决了一个Launchy的 &lt;a href="https://github.com/samsonwang/LaunchyQt/issues/22"&gt;bug&lt;/a&gt; ，通过剪贴版向excel拷贝内容时会报OLE错误。我认为这个bug的排查过程比较有意义，在此记录下来。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/debug-qt-ole-error/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>ole</category><category>qt</category><category>windows</category><guid>https://blog.wangzhl.com/posts/debug-qt-ole-error/</guid><pubDate>Sat, 08 Feb 2020 01:37:33 GMT</pubDate></item><item><title>文件操作函数接口的比较</title><link>https://blog.wangzhl.com/posts/fopen-api-compare/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在维护一个老项目时发现，该程序的日志在程序运行时是不能够被其他程序打开的，也就不能通过日志实时地观察程序的运行状态。在我的印象里，我一直认为打开的文件都是共享的，这应该是个错觉。本篇日志主要总结了在打开一个文件时所使用函数接口，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/fopen-api-compare/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>c11</category><category>cpp</category><category>cpp11</category><category>file</category><category>windows</category><guid>https://blog.wangzhl.com/posts/fopen-api-compare/</guid><pubDate>Thu, 19 Dec 2019 14:08:11 GMT</pubDate></item><item><title>为什么条件变量需要与互斥锁配合使用</title><link>https://blog.wangzhl.com/posts/why-condition-variable-requires-mutex/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
条件变量（condition variable）是常用的线程同步技术，通常用于让线程阻塞并等待某个条件满足。它需要与互斥锁搭配使用，但是你有想过为什么需要搭配一个互斥锁呢？&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/why-condition-variable-requires-mutex/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>boost</category><category>condition variable</category><category>cpp</category><category>cpp11</category><category>mutex</category><category>thread</category><guid>https://blog.wangzhl.com/posts/why-condition-variable-requires-mutex/</guid><pubDate>Thu, 12 Dec 2019 14:38:41 GMT</pubDate></item><item><title>C语言中数组地址的特性</title><link>https://blog.wangzhl.com/posts/c-array-address-tips/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在开发中使用到了C风格的数组，在对数组地址进行增减操作时有些疑惑，现在将这些要点总结下来，方便查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/c-array-address-tips/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>array</category><category>c</category><category>cpp</category><guid>https://blog.wangzhl.com/posts/c-array-address-tips/</guid><pubDate>Wed, 30 Oct 2019 08:51:42 GMT</pubDate></item><item><title>MSVC工程里Unicode字符集和多字节字符集选项</title><link>https://blog.wangzhl.com/posts/msvc-cpp-project-unicode-and-mbcs/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在Visual Studio的C++工程中，有个一选项可以设置当前工程的字符集，本文主要围绕着该设置置项展开。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/msvc-cpp-project-unicode-and-mbcs/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>charset</category><category>cpp</category><category>MBCS</category><category>unicode</category><category>windows</category><guid>https://blog.wangzhl.com/posts/msvc-cpp-project-unicode-and-mbcs/</guid><pubDate>Tue, 15 Oct 2019 12:44:03 GMT</pubDate></item><item><title>排查Windows平台动态库和静态库链接失败问题</title><link>https://blog.wangzhl.com/posts/library-linking-error-on-windows/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近帮同事查了一个C++链接过程的问题，这个问题比较隐蔽，也非常有代表性，记录下来方便后面查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/library-linking-error-on-windows/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>dumpbin</category><category>linking</category><category>windows</category><guid>https://blog.wangzhl.com/posts/library-linking-error-on-windows/</guid><pubDate>Sun, 22 Sep 2019 02:22:09 GMT</pubDate></item></channel></rss>