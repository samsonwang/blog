<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about cpp)</title><link>https://blog.wangzhl.com/</link><description></description><atom:link href="https://blog.wangzhl.com/tags/cpp.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2020 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;
&lt;img alt="cc-by-nc 4.0" style="padding-bottom:2px" src="/images/cc-by-nc.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Sun, 19 Apr 2020 05:44:57 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>如何实现一个定时器</title><link>https://blog.wangzhl.com/posts/how-to-implement-a-timer/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在以前的一次面试中，我被问到该如何实现一个定时器，当时我并没有思考过这个问题，所以回答的并不令人满意。在日常的开发中，一个需要定时执行的任务是很常见的。我认为这个问题比较有意义，也非常具有代表性。于是，我查阅了一些资料，并整理出这篇博客。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/how-to-implement-a-timer/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>alarm</category><category>c</category><category>cpp</category><category>linux</category><category>signal</category><category>timer</category><category>timerfd</category><guid>https://blog.wangzhl.com/posts/how-to-implement-a-timer/</guid><pubDate>Sat, 11 Apr 2020 01:10:09 GMT</pubDate></item><item><title>Qt程序中OLE错误的调试记录</title><link>https://blog.wangzhl.com/posts/debug-qt-ole-error/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近解决了一个Launchy的 &lt;a href="https://github.com/samsonwang/LaunchyQt/issues/22"&gt;bug&lt;/a&gt; ，通过剪贴版向excel拷贝内容时会报OLE错误。我认为这个bug的排查过程比较有意义，在此记录下来。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/debug-qt-ole-error/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>ole</category><category>qt</category><category>windows</category><guid>https://blog.wangzhl.com/posts/debug-qt-ole-error/</guid><pubDate>Sat, 08 Feb 2020 01:37:33 GMT</pubDate></item><item><title>文件操作函数接口的比较</title><link>https://blog.wangzhl.com/posts/fopen-api-compare/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在维护一个老项目时发现，该程序的日志在程序运行时是不能够被其他程序打开的，也就不能通过日志实时地观察程序的运行状态。在我的印象里，我一直认为打开的文件都是共享的，这应该是个错觉。本篇日志主要总结了在打开一个文件时所使用函数接口，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/fopen-api-compare/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>c11</category><category>cpp</category><category>cpp11</category><category>file</category><category>windows</category><guid>https://blog.wangzhl.com/posts/fopen-api-compare/</guid><pubDate>Thu, 19 Dec 2019 14:08:11 GMT</pubDate></item><item><title>为什么条件变量需要与互斥锁配合使用</title><link>https://blog.wangzhl.com/posts/why-condition-variable-requires-mutex/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
条件变量（condition variable）是常用的线程同步技术，通常用于让线程阻塞并等待某个条件满足。它需要与互斥锁搭配使用，但是你有想过为什么需要搭配一个互斥锁呢？&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/why-condition-variable-requires-mutex/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>boost</category><category>condition variable</category><category>cpp</category><category>cpp11</category><category>mutex</category><category>thread</category><guid>https://blog.wangzhl.com/posts/why-condition-variable-requires-mutex/</guid><pubDate>Thu, 12 Dec 2019 14:38:41 GMT</pubDate></item><item><title>C语言中数组地址的特性</title><link>https://blog.wangzhl.com/posts/c-array-address-tips/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在开发中使用到了C风格的数组，在对数组地址进行增减操作时有些疑惑，现在将这些要点总结下来，方便查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/c-array-address-tips/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>array</category><category>c</category><category>cpp</category><guid>https://blog.wangzhl.com/posts/c-array-address-tips/</guid><pubDate>Wed, 30 Oct 2019 08:51:42 GMT</pubDate></item><item><title>MSVC工程里Unicode字符集和多字节字符集选项</title><link>https://blog.wangzhl.com/posts/msvc-cpp-project-unicode-and-mbcs/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在Visual Studio的C++工程中，有个一选项可以设置当前工程的字符集，本文主要围绕着该设置置项展开。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/msvc-cpp-project-unicode-and-mbcs/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>charset</category><category>cpp</category><category>MBCS</category><category>unicode</category><category>windows</category><guid>https://blog.wangzhl.com/posts/msvc-cpp-project-unicode-and-mbcs/</guid><pubDate>Tue, 15 Oct 2019 12:44:03 GMT</pubDate></item><item><title>排查Windows平台动态库和静态库链接失败问题</title><link>https://blog.wangzhl.com/posts/library-linking-error-on-windows/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近帮同事查了一个C++链接过程的问题，这个问题比较隐蔽，也非常有代表性，记录下来方便后面查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/library-linking-error-on-windows/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>dumpbin</category><category>linking</category><category>windows</category><guid>https://blog.wangzhl.com/posts/library-linking-error-on-windows/</guid><pubDate>Sun, 22 Sep 2019 02:22:09 GMT</pubDate></item><item><title>C++中delete关键字常见错误</title><link>https://blog.wangzhl.com/posts/cpp-delete-keyword-common-mistakes/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
C++中的delete关键字用于释放动态申请的内存，是使用频率非常高的关键字，本文将开发中常出现的错误加以总结，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/cpp-delete-keyword-common-mistakes/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>delete</category><guid>https://blog.wangzhl.com/posts/cpp-delete-keyword-common-mistakes/</guid><pubDate>Mon, 01 Jul 2019 12:36:31 GMT</pubDate></item><item><title>位域与联合体的内存布局</title><link>https://blog.wangzhl.com/posts/bit-field-and-union-type/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
位域（bit field）与联合体（union）都可以用来控制内存布局。本文主要阐述的内存可总结为：位域的内存布局是编译器决定的，而联合体的内存布局是由大小端决定的。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/bit-field-and-union-type/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>bit field</category><category>c</category><category>cpp</category><category>endian</category><category>memory layout</category><category>union</category><guid>https://blog.wangzhl.com/posts/bit-field-and-union-type/</guid><pubDate>Tue, 21 May 2019 08:35:02 GMT</pubDate></item><item><title>深入探索C++内存模型（4）</title><link>https://blog.wangzhl.com/posts/inside-the-cpp-object-model-4/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
第四章是Function语意学，这一章主要介绍类相关函数的底层实现原理，就虚函数进行了展开讨论，通过实际代码的测试结果验证分析结论。对 inline 函数可能会出现的问题进行了分析，对 inline 函数的使用提出了指导意见。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/inside-the-cpp-object-model-4/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>digest</category><category>Lippman</category><category>memory layout</category><category>object model</category><guid>https://blog.wangzhl.com/posts/inside-the-cpp-object-model-4/</guid><pubDate>Mon, 22 Apr 2019 02:27:22 GMT</pubDate></item></channel></rss>