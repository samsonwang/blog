<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about digest)</title><link>https://blog.wangzhl.com/</link><description></description><atom:link href="https://blog.wangzhl.com/tags/digest.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2021 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;
&lt;img alt="cc-by-nc 4.0" style="padding-bottom:2px" src="/images/cc-by-nc.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Tue, 23 Nov 2021 01:14:56 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>深入探索C++内存模型（4）</title><link>https://blog.wangzhl.com/posts/inside-the-cpp-object-model-4/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
第四章是Function语意学，这一章主要介绍类相关函数的底层实现原理，就虚函数进行了展开讨论，通过实际代码的测试结果验证分析结论。对 inline 函数可能会出现的问题进行了分析，对 inline 函数的使用提出了指导意见。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/inside-the-cpp-object-model-4/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>digest</category><category>Lippman</category><category>memory layout</category><category>object model</category><guid>https://blog.wangzhl.com/posts/inside-the-cpp-object-model-4/</guid><pubDate>Mon, 22 Apr 2019 02:27:22 GMT</pubDate></item><item><title>深入探索C++内存模型（3）</title><link>https://blog.wangzhl.com/posts/inside-the-cpp-object-model-3/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
第三章的标题是Data语意学，这一章主要的研究对象是类的成员变量相关的操作原理，静态成员变量与非静态成员变量，单一继承、多重继承、虚继承对成员变量内存分布和存取性能的影响。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/inside-the-cpp-object-model-3/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>digest</category><category>Lippman</category><category>memory layout</category><category>object model</category><guid>https://blog.wangzhl.com/posts/inside-the-cpp-object-model-3/</guid><pubDate>Fri, 12 Apr 2019 05:13:16 GMT</pubDate></item><item><title>深入探索C++内存模型（2）</title><link>https://blog.wangzhl.com/posts/inside-the-cpp-object-model-2/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
构造函语意学是本书的第二章，这一章节主要针对构造函数在不同情况的底层实现细节进行的全面的讨论。阐述了在类对象（class object）的构造期间，编译器进行的额外操作的原理。针对默认构造函数（default constructor）和拷贝构造函数（copy constructor）分别展开了细致的讨论，引出了编译器 NRV 优化的概念，揭示了成员初始化列表的作用机理。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/inside-the-cpp-object-model-2/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>digest</category><category>Lippman</category><category>memory layout</category><category>object model</category><guid>https://blog.wangzhl.com/posts/inside-the-cpp-object-model-2/</guid><pubDate>Mon, 25 Mar 2019 07:52:36 GMT</pubDate></item><item><title>深入探索C++内存模型（1）</title><link>https://blog.wangzhl.com/posts/inside-the-cpp-object-model-1/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近花时间读了一下《深入探索C++内存模型》，这本带我了解到了更底层的C++知识。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
这本书从C++语言各种特性的实现机制上进行细致剖析，进而总结出对软件开发具有指导意义的经验和结论。这本书的目标群体是具有开发经验的中高级开发人员，其内容的专业性是不容质疑的。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
从我的阅读感受上讲，它相对比那些一般的技术文档要耗时耗力。全书共三百多页，粗略地估算了一下，我却用了一个月的空余时间才读完。我会将读书笔记整理成博文，这样能够加深记忆，也方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/inside-the-cpp-object-model-1/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>digest</category><category>Lippman</category><category>memory layout</category><category>object model</category><guid>https://blog.wangzhl.com/posts/inside-the-cpp-object-model-1/</guid><pubDate>Mon, 11 Mar 2019 02:30:13 GMT</pubDate></item></channel></rss>