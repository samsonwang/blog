<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about windows)</title><link>http://samsonwang.me/</link><description></description><atom:link href="http://samsonwang.me/tags/windows.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2018 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc/4.0/"&gt;&lt;img alt="知识共享许可协议" style="border-width:0; vertical-align:text-top;" src="https://i.creativecommons.org/l/by-nc/4.0/80x15.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Fri, 14 Sep 2018 10:00:07 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>跨平台下的进程和线程同步机制比较</title><link>http://samsonwang.me/posts/cross-platform-process-and-thread-sync/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
在跨平台软件开发时，经常会遇到多进程和多线程的同步。在linux和windows下都有各自的同步机制，本文主要总结和比较了两个平台下同步机制。&lt;br&gt;
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;进程同步&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
进程同步，即两个不同的进程在访问相同的资源时，出现了竞争关系，需要一个同步机制使其在操作过程中保证排他性。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;linux&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
从一些资料上来看、在linux下常用的进程间同步机制有原子操作（atomic operation）、自旋锁（spin lock）、读写锁（reader/writer lock）、互斥量（mutex）。&lt;br&gt;
但是在实际操作中，如果在两个进程中获取同一份资源，只有获取到同一份进程同步设备，才有可能完成相应的同步操作。&lt;br&gt;
这些进程同步方式在父子进程的同步上能够实现同步设备的共享访问，在执行fork之后子进程能够拥有父进程资源的拷贝，这样就能够完成进程间的相互同步了。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
同步设备：（sync facility）同步设备这个词在本文中主要表示一个具体的原子变量、自旋锁、互斥量等。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
但是对于两个独立的进程，它们如何能够实现同步呢？由于如何在两个进程中获取同一个同步设备呢？&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;




&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;windows&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;







&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;线程同步&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
&lt;b&gt;linux&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;windows&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;同步机制的数量限制&lt;/h2&gt;
&lt;/div&gt;



&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;参考资料&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
&lt;a href="https://stackoverflow.com/questions/248911/how-do-i-synchronize-two-processes"&gt;https://stackoverflow.com/questions/248911/how-do-i-synchronize-two-processes&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>linux</category><category>windows</category><guid>http://samsonwang.me/posts/cross-platform-process-and-thread-sync/</guid><pubDate>Sun, 06 May 2018 00:46:40 GMT</pubDate></item><item><title>跨平台共享内存库</title><link>http://samsonwang.me/posts/shared-memory-cross-platform-soultion/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;跨平台共享内存库&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
共享内存作为进程间数据交互途径，其优点是速度快。&lt;br&gt;
由于项目需要，需要在不同平台上使用共享内存，需要对共享内存的使用流程进行抽象。我对Windows和Linux下使用共享内存进行了研究和总结，并将其中的功能共享代码剥离出来，代码库路径： &lt;a href="https://github.com/samsonwang/SharedMem"&gt;SharedMem&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;共享内存的使用流程&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
需要由一个模块负责创建共享内存。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;生成共享内存key&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
每个key可以唯一确定一个共享内存。一般是通过一个文件生成出key，这样能够保证多个进程访问的是一块共享内存。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-1-2-1" class="outline-4"&gt;
&lt;h4 id="sec-1-2-1"&gt;在windows上的的ftok替代方法&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-1"&gt;
&lt;blockquote&gt;
&lt;p&gt;
找到了WINDOWS这边与之对应的概念，就是BY&lt;sub&gt;HANDLE&lt;/sub&gt;&lt;sub&gt;FILE&lt;/sub&gt;&lt;sub&gt;INFORMATION，其实AIX存文件的时候，是使用设备号&lt;/sub&gt;+文件号来存储的，而WINDOWS是&lt;br&gt;
采用设备号+文件号高位+文件号地位来存储的，应该算的上是一种对应关系。（在WINDOWS这边也有IPC,但是里面的设备号和文件号都是0）&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_BY_HANDLE_FILE_INFORMATION&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;    &lt;span class="n"&gt;dwFileAttributes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;FILETIME&lt;/span&gt; &lt;span class="n"&gt;ftCreationTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;FILETIME&lt;/span&gt; &lt;span class="n"&gt;ftLastAccessTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;FILETIME&lt;/span&gt; &lt;span class="n"&gt;ftLastWriteTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;    &lt;span class="n"&gt;dwVolumeSerialNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;    &lt;span class="n"&gt;nFileSizeHigh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;    &lt;span class="n"&gt;nFileSizeLow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;    &lt;span class="n"&gt;nNumberOfLinks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;    &lt;span class="n"&gt;nFileIndexHigh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;    &lt;span class="n"&gt;nFileIndexLow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;BY_HANDLE_FILE_INFORMATION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;PBY_HANDLE_FILE_INFORMATION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;LPBY_HANDLE_FILE_INFORMATION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
使用这个就是可以通过3个DWORD（也可以理解是一种int）就可以唯一标识一个文件了。如果文件不存在，就是-1（在内存中是0xffffffff)。&lt;br&gt;
而后需要解释的就是WINDOWS中的信号名称最好是“xxxx-xxxxxxxx-xxxxxxxxxxxxxxxx”（偏移-设备号-文件号）这种形式。字节数（4-8-16）&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// _BY_HANDLE_FILE_INFORMATION 的获取方式：&lt;/span&gt;
&lt;span class="c1"&gt;// ---- get fi ----&lt;/span&gt;
&lt;span class="n"&gt;HANDLE&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;INVALID_HANDLE_VALUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;BY_HANDLE_FILE_INFORMATION&lt;/span&gt; &lt;span class="n"&gt;fi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreateFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPEN_EXISTING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;GetFileInformationByHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ---- get fi ----&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
参考资料:  &lt;a href="https://my.oschina.net/ncr/blog/674982"&gt;windows file handle&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;跨平台进程锁和线程锁&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
在访问共享内存数据时，需要增加进程锁。所以也需要对进程锁进行&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cpp</category><category>linux</category><category>windows</category><guid>http://samsonwang.me/posts/shared-memory-cross-platform-soultion/</guid><pubDate>Mon, 12 Mar 2018 03:03:46 GMT</pubDate></item><item><title>windows平台下的C++开发框架</title><link>http://samsonwang.me/posts/cpp-development-framework-on-windows/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
在开发windows应用程序时，经常会遇到win32、mfc、atl的函数。下面就对三种API（或者说是开发框架）进行了总结。&lt;br&gt;
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Win32开发框架&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
win32开发框架是最基础的函数接口，更接近操作系统底层。&lt;br&gt;
使用Win32接口的优点是程序的依赖最小，生成的可执行文件的体积也最小。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;MFC开发框架&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
MFC是Microsoft Foundation Class的缩写，将win32的相关接口按照OOP的思想封装了起来，目的是提供一个快速开发原生应用的框架。&lt;br&gt;
使用MFC开发的程序体型略显臃肿，而且MFC也比较陈旧了，并不推荐使用MFC进行开发。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;ATL开发框架&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
ATL是Active Template Library的缩写，是针对COM组件的开发实现的一套开发框架。ATL简化了ActiveX COM组件的开发。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>atl</category><category>cpp</category><category>mfc</category><category>win32</category><category>windows</category><guid>http://samsonwang.me/posts/cpp-development-framework-on-windows/</guid><pubDate>Wed, 07 Feb 2018 14:56:21 GMT</pubDate></item></channel></rss>