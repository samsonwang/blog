<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about signal)</title><link>https://blog.wangzhl.com/</link><description></description><atom:link href="https://blog.wangzhl.com/tags/signal.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2021 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;
&lt;img alt="cc-by-nc 4.0" style="padding-bottom:2px" src="/images/cc-by-nc.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Tue, 16 Mar 2021 09:20:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>处理Linux信号需要注意的几个问题</title><link>https://blog.wangzhl.com/posts/linux-signal-programming-tips/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
Linux中的信号（signal）是一个非常实用的功能，进程间能发送信号，内核也能向进程发送信号。本文总结了在进行信号编程时容易忽略的几个问题，方便后续开发过程中查阅。&lt;br&gt;
&lt;/p&gt;


&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/linux-signal-programming-tips/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>multi-thread</category><category>sigmask</category><category>signal</category><category>tips</category><guid>https://blog.wangzhl.com/posts/linux-signal-programming-tips/</guid><pubDate>Mon, 09 Nov 2020 14:01:35 GMT</pubDate></item><item><title>如何实现一个定时器</title><link>https://blog.wangzhl.com/posts/how-to-implement-a-timer/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在以前的一次面试中，我被问到该如何实现一个定时器，当时我并没有思考过这个问题，所以回答的并不令人满意。在日常的开发中，一个需要定时执行的任务是很常见的。我认为这个问题比较有意义，也非常具有代表性。于是，我查阅了一些资料，并整理出这篇博客。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/how-to-implement-a-timer/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>alarm</category><category>c</category><category>cpp</category><category>linux</category><category>signal</category><category>timer</category><category>timerfd</category><guid>https://blog.wangzhl.com/posts/how-to-implement-a-timer/</guid><pubDate>Sat, 11 Apr 2020 01:10:09 GMT</pubDate></item><item><title>在Linux的信号处理函数中不要进行锁相关操作</title><link>https://blog.wangzhl.com/posts/linux-signal-handler-callback-mutex/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在写一个linux程序，其中一个逻辑是要等待信号（signal），我使用了条件变量（condition variable）来完成这个操作，但是实际效果却是整个程序卡住了，经过查阅资料后得知在信号处理函数中是不能进行锁操作的。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/linux-signal-handler-callback-mutex/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>mutex</category><category>sigaction</category><category>signal</category><category>signal handler</category><category>sigtimedwait</category><category>sigwait</category><guid>https://blog.wangzhl.com/posts/linux-signal-handler-callback-mutex/</guid><pubDate>Sat, 26 Oct 2019 13:41:50 GMT</pubDate></item><item><title>在gdb调试时忽略系统信号（signal）</title><link>https://blog.wangzhl.com/posts/gdb-ignore-received-signal/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
在gdb调试程序时，默认情况下gdb在收到信号时会中断程序的运行，并将收到的信号显示出来。这时，可以选择输入 &lt;code&gt;c&lt;/code&gt; (continue)让程序继续运行。如果程序会重复收到这信号，会非常影响调试效率。可以通过配置忽略指定的系统信号。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
查看当前系统信号的处理信息的指令如下。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) info signal
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
以调试网络程序为例，进程会经常收到 &lt;code&gt;SIGPIPE&lt;/code&gt; 消息，对于网络进程的 &lt;code&gt;SIGPIPE&lt;/code&gt; 消息在程序中会由自身处理，可以使用以下指令让gdb不再提示 &lt;code&gt;SIGPIPE&lt;/code&gt; 信号。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) handle SIGPIPE nostop noprint
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
其中， &lt;code&gt;nostop&lt;/code&gt; 表示在收到信号时不再中断程序的运行， &lt;code&gt;noprint&lt;/code&gt; 表示在收到信号时不再将收到的信号打印到gdb调试界面，这两个参数可以分开使用。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
参考资料： &lt;a href="ftp://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_38.html"&gt;gnu gdb manual&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
（全文完）&lt;br&gt;
&lt;/p&gt;</description><category>gdb</category><category>linux</category><category>signal</category><guid>https://blog.wangzhl.com/posts/gdb-ignore-received-signal/</guid><pubDate>Thu, 19 Apr 2018 08:00:47 GMT</pubDate></item></channel></rss>