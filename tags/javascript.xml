<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about javascript)</title><link>http://samsonwang.me/</link><description></description><atom:link href="http://samsonwang.me/tags/javascript.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2018 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc/4.0/"&gt;&lt;img alt="知识共享许可协议" style="border-width:0; vertical-align:text-top;" src="https://i.creativecommons.org/l/by-nc/4.0/80x15.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Fri, 31 Aug 2018 07:24:50 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>为什么要使用各种前端框架</title><link>http://samsonwang.me/posts/why-front-end-libraries/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;引言&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
在学习前端的过程中，我开始接触到许多开发框架或开发工具，这些工具让我开始眼花缭乱。使用常规的html/css/js就已经能够开发出这种网页了，所以我问自己，为什么要学习这些框架或工具，这些库是用来解决什么问题的。想明白这个问题，我学习的目的就更加明确，在遇到一些开发情景时，也能够快速准确地挑选出应该使用的框架。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
下面按照我目前的理解，对目前的主流的前端开发库进行一些分析和比较。由于我还是一个初学着，所以我的观点可能还不是很成熟。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;为什么要使用jQuery&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
jQuery是一个轻量级js库，它有如下特性：&lt;br&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;简化了HTML/DOM操作&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;CSS选择器&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;动画特效支持&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;解决跨浏览器的兼容行问题&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;完善的Ajax支持&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
在查阅资料的过程中，我还听到一些主张停用jQuery的声音。原因就在于随着前端开发生态不断的完善，现代浏览器原生API已经足够好用。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;为什么要使用SASS&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
SASS是一种CSS预编译格式，它最终会编译成CSS。&lt;br&gt;
SASS提供了CSS语法的拓展，它支持变量，算数运算符，循环操作，函数操作，样式模板（mixin）等强大的特性。它能够让开发人员更方便地编写CSS。SASS支持 &lt;code&gt;import&lt;/code&gt; 关键字，这样就能够很方便地对样式进行模块化设计。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
加一句题外话，在使用SASS时，需要考虑的另一个问题就是代码物理结构的安排（直白的说就是目录的划分，源文件的存放位置等），这也是所有代码开发中需要注意的问题。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
与SASS相似的工具还有LESS。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;为什么要使用Bootstrap&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
Bootstrap是一个用于快速开发网页的前端框架。以我目前的理解来看，它更像是一个网页样式框架。&lt;br&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;丰富的基础样式和资源&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;响应式（responsive），良好的移动端支持&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;强大的网格（grid）系统&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;一致性，保证跨浏览器的样式一致&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;为什么要使用React&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
DOM操作对性能的影响很大，频繁的DOM操作会使网页渲染的速度变慢，React主要解决了这个问题。&lt;br&gt;
React.js允许在js中编写html，形成Virtual DOM，只在变化进行重新渲染。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
下面的一段文字摘自参考资料中的第5篇文章。&lt;br&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Am I building an app which has lots of DOM interactions, or is it a relatively simple app with relatively few interactions?&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;Does my app require a very high browser performance, that any user interactions must immediately be reflected in the UI? Is my data going to change over time, at a high rate?&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;Is one user interaction going to affect many other areas/components in the UI?&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;Is there a possibility that my app could grow big in the future, and so I would want to write extremely neat, modular front-end JavaScript that is easy to maintain? Would I want to use lots of native JavaScript or would I prefer using a lot of abstractions/methods provided in a framework?&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;Would I prefer a framework/library which does not have a high learning curve and which is pretty easy to get started with development?&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;
在使用React之前，问自己这样几个问题，就能够帮助你决定是否需要使用React。&lt;br&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;所开发的网页应用涉及到很多DOM操作么？&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;开发的网页应用需要很高的性能么，这意味着任何用于的操作都要立刻反应在界面上？我的数据变更会很频繁么？&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;我开发的应用会在未来逐渐变得复杂么，这样我就需要将前端的js代码模块化？我是否会使用许多原生js特性，是否虚幻使用框架提供的抽象方法&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;是否需要一个学习曲线比较平缓的框架，能够方便地上手进行开发？&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;参考资料&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/jquery/jquery_intro.asp"&gt;w3schools jQuery intro&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nefe/You-Dont-Need-jQuery"&gt;github you don't need jQuery&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mugo.ca/Blog/7-benefits-of-using-SASS-over-conventional-CSS"&gt;7 benefits of SASS&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.devsaran.com/blog/10-best-reasons-use-bootstrap-amazing-web-designs"&gt;10 best reasons to use bootstrap&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scotch.io/@anitashah/what-problems-does-reactjs-solve-when-must-you-select-reactjs"&gt;what problems does reactjs solve&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>css</category><category>front-end</category><category>html</category><category>javascript</category><guid>http://samsonwang.me/posts/why-front-end-libraries/</guid><pubDate>Mon, 27 Aug 2018 14:10:35 GMT</pubDate></item><item><title>javscript中的OOP特性</title><link>http://samsonwang.me/posts/javascript-object-oriented-programming/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 引言&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
js也是具有OOP（object oriented programming）特性的，OOP在构建一些大型应用程序还是有一套成熟理论的。作为C++的使用者在学习js中的OOP特性的过程中，能够较快地理解其中的各种术语和概念，也能比较两种语言的异同，深化知识理解。通过js的OOP特性的学习也让我开始从语言层面考虑程序设计问题。&lt;br&gt;
本篇文章主要介绍了js中的一些OOP特性，并且比较了js与C++的语言特性。如果你能熟练掌握C++的OOP特性，本文能帮助你快速地对js中的OOP特性建立整体的认识。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 写给C++使用者的js中的OOP特性介绍&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; 创建对象（object）&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
js中创建object的代码，示例如下：&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let duck = {
  name: "Aflac",
  numLegs: 2,
  sayName: function() {
    return "The name of this duck is " + this.name + ".";
  }
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
js直接通过 &lt;code&gt;{}&lt;/code&gt; 就可以创建出对象示例来，不需要对该对象（object）的类（class）进行声明。这点和C++不是很相同，C++需要先声明一个class再创建object。&lt;br&gt;
这个object有两个成员变量和一个成员函数，需要注意的是这两个成员变量都是公有（public）的，他们是可以直接用 &lt;code&gt;.&lt;/code&gt; 符号访问的。&lt;br&gt;
js中也有 &lt;code&gt;this&lt;/code&gt; 关键字，与C++相同， &lt;code&gt;this&lt;/code&gt; 关键字用于表示当前实例。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;&lt;span class="section-number-3"&gt;2.2&lt;/span&gt; 类（class）的声明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
js中声明一个类的操作实际上就是声明一个构造函数。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let Bird = function(name, color) {
  this.name = name;
  this.color = color;
  this.numLegs = 2;
}

let crow = new Bird("Alexis", "black");

crow instanceof Bird; // =&amp;gt; true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
上面的代码声明了Bird类，在js中通常类的名字都是由首字母大写的单词表示的。类的构造函数也能接受参数用于对实例的初始化，这点与C++非常相似，使用 &lt;code&gt;new&lt;/code&gt; 关键字就能够创建该类的实例。&lt;br&gt;
使用 &lt;code&gt;instanceof&lt;/code&gt; 关键字用于检查对象是否属于某个类，也可通过验证 &lt;code&gt;constructor&lt;/code&gt; 属性来判断一个对象是否属于一个类 &lt;code&gt;crow.constructor == Bird&lt;/code&gt; 。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;&lt;span class="section-number-3"&gt;2.3&lt;/span&gt; 类的共有成员&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;p&gt;
js中通过 &lt;code&gt;prototype&lt;/code&gt; 这一属性（把它叫做关键字好像还不太合适）能够实现C++中静态成员变量和静态成员函数的特性。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bird.prototype.numLegs = 2;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
上面的代码就给Bird类增加了一个静态成员变量。这个 &lt;code&gt;prototype&lt;/code&gt; 可以是一个对象，这样类的共有成员就能方便地承载更多的属性了，示例代码如下。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bird.prototype = {
  constructor: Bird,
  numLegs: 2,
  eat: function() {
    console.log("nom nom nom");
  },
  describe: function() {
    console.log("My name is " + this.name);
  }
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
需要注意的是需要设置好 &lt;code&gt;constructor&lt;/code&gt; 属性，这样是为了保证代码逻辑的一致性。&lt;br&gt;
对象会获得类的 &lt;code&gt;prototype&lt;/code&gt; 属性，可以通过 &lt;code&gt;isPrototypeof&lt;/code&gt; 方法来验证。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bird.prototype.isPrototypeOf(duck);
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-4" class="outline-3"&gt;
&lt;h3 id="sec-2-4"&gt;&lt;span class="section-number-3"&gt;2.4&lt;/span&gt; 类的私有成员&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-4"&gt;
&lt;p&gt;
js与C++一样，也可以有私有成员变量，代码如下所示。 &lt;code&gt;hatchedEgg&lt;/code&gt; 就相当与是Bird的私有成员变量，并且提供了修改这个成员变量的方法 &lt;code&gt;getHatchedEggCount&lt;/code&gt; 。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function Bird() {
  let hatchedEgg = 10; // private property

  this.getHatchedEggCount = function() {
    // publicly available method that a bird object can use
    return hatchedEgg;
  };
}
let ducky = new Bird();
ducky.getHatchedEggCount(); // returns 10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
这种形式在js中被称作闭包（closure），函数能够访问到与他处在同一个作用域（context）中的变量。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-5" class="outline-3"&gt;
&lt;h3 id="sec-2-5"&gt;&lt;span class="section-number-3"&gt;2.5&lt;/span&gt; 类的继承和派生&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-5"&gt;
&lt;p&gt;
js中的派生主要通过 &lt;code&gt;prototype&lt;/code&gt; 体现，下面的代码表示Bird派生自Object。同样，需要注意将 &lt;code&gt;constructor&lt;/code&gt; 属性设置好。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bird.prototype = Object.create(Animal.prototype);
Bird.prototype.constructor = Bird;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-6" class="outline-3"&gt;
&lt;h3 id="sec-2-6"&gt;&lt;span class="section-number-3"&gt;2.6&lt;/span&gt; 类的覆盖&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-6"&gt;
&lt;p&gt;
js中可以重写基类中的方法，代码如下所示，这点与C++中的 &lt;code&gt;override&lt;/code&gt; 相同。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function Animal() { }
Animal.prototype.eat = function() {
  return "nom nom nom";
};
function Bird() { }

// Inherit all methods from Animal
Bird.prototype = Object.create(Animal.prototype);

// Bird.eat() overrides Animal.eat()
Bird.prototype.eat = function() {
  return "peck peck peck";
};

Bird.prototype.fly = function() {
  console.log("I'm flying!");
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
通样也在派生之后也可以通过修改派生类的 &lt;code&gt;prototype&lt;/code&gt; 以达到特化派生类的作用，上面的 &lt;code&gt;fly&lt;/code&gt; 方法就是在Bird完成派生之后新增的方法。现在Bird有两个方法，它们分别是 &lt;code&gt;eat&lt;/code&gt; 和 &lt;code&gt;fly&lt;/code&gt; 。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; 参考资料&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/object-oriented-programming/"&gt;FCC javascript oop tutorial&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cpp</category><category>javascript</category><category>oop</category><guid>http://samsonwang.me/posts/javascript-object-oriented-programming/</guid><pubDate>Sun, 26 Aug 2018 02:31:37 GMT</pubDate></item></channel></rss>