<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts about linux)</title><link>https://blog.wangzhl.com/</link><description></description><atom:link href="https://blog.wangzhl.com/tags/linux.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2023 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;
&lt;img alt="cc-by-nc 4.0" style="padding-bottom:2px" src="/images/cc-by-nc.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Fri, 24 Nov 2023 10:03:22 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>在运行时获取动态库的路径</title><link>https://blog.wangzhl.com/posts/get-runtime-dll-path/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在开发一个动态库，这个动态库需要在运行时动态地加载另一个动态库。在库发布时会同时提供这两个动态库。库的使用者会主动加载第一个动态库，问题出现在第一个动态库加载第二个动态库时，如何确定第二个动态库的位置。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/get-runtime-dll-path/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>cpp</category><category>linux</category><category>windows</category><guid>https://blog.wangzhl.com/posts/get-runtime-dll-path/</guid><pubDate>Fri, 11 Jun 2021 10:19:06 GMT</pubDate></item><item><title>处理Linux信号需要注意的几个问题</title><link>https://blog.wangzhl.com/posts/linux-signal-programming-tips/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
Linux中的信号（signal）是一个非常实用的功能，进程间能发送信号，内核也能向进程发送信号。本文总结了在进行信号编程时容易忽略的几个问题，方便后续开发过程中查阅。&lt;br&gt;
&lt;/p&gt;


&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/linux-signal-programming-tips/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>multi-thread</category><category>sigmask</category><category>signal</category><category>tips</category><guid>https://blog.wangzhl.com/posts/linux-signal-programming-tips/</guid><pubDate>Mon, 09 Nov 2020 14:01:35 GMT</pubDate></item><item><title>查看操作系统中所有的共享内存</title><link>https://blog.wangzhl.com/posts/list-shared-memory-in-system/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在开发一个基于共享内存的跨平台数据缓存组件，核心思想是将数据存放在共享内存中以实现多进程间数据交换。在开发和调试过程中需要借助工具查看系统中的共享内存。本文记录了Linux和Windows下查看共享内存状态信息的方法。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/list-shared-memory-in-system/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>shared memory</category><category>windows</category><guid>https://blog.wangzhl.com/posts/list-shared-memory-in-system/</guid><pubDate>Fri, 14 Aug 2020 02:40:12 GMT</pubDate></item><item><title>如何实现一个定时器</title><link>https://blog.wangzhl.com/posts/how-to-implement-a-timer/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在以前的一次面试中，我被问到该如何实现一个定时器，当时我并没有思考过这个问题，所以回答的并不令人满意。在日常的开发中，一个需要定时执行的任务是很常见的。我认为这个问题比较有意义，也非常具有代表性。于是，我查阅了一些资料，并整理出这篇博客。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/how-to-implement-a-timer/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>alarm</category><category>c</category><category>cpp</category><category>linux</category><category>signal</category><category>timer</category><category>timerfd</category><guid>https://blog.wangzhl.com/posts/how-to-implement-a-timer/</guid><pubDate>Sat, 11 Apr 2020 01:10:09 GMT</pubDate></item><item><title>在Linux中关闭防火墙</title><link>https://blog.wangzhl.com/posts/linux-turn-off-firewall/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文主要介绍了firewalld、ufw和iptables防火墙的关闭方法，为了方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/linux-turn-off-firewall/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>firewall</category><category>linux</category><category>ufw</category><guid>https://blog.wangzhl.com/posts/linux-turn-off-firewall/</guid><pubDate>Wed, 01 Jan 2020 00:41:00 GMT</pubDate></item><item><title>gpg操作备忘</title><link>https://blog.wangzhl.com/posts/gnu-private-guard-cheatsheet/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
gpg的全称是gnu privacy guard，用于实现网络传输时的加密和解密。它有点类似于ssh的加解密过程，都有公钥和私钥，使用私钥加密公钥解密。我有一个应用场景需要在emacs中自动对org mode进行加密，使用了gpg完成加密过程。本文主要总结了gpg的常用命令。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/gnu-private-guard-cheatsheet/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cheatsheet</category><category>gnu</category><category>gpg</category><category>linux</category><guid>https://blog.wangzhl.com/posts/gnu-private-guard-cheatsheet/</guid><pubDate>Fri, 20 Dec 2019 13:33:33 GMT</pubDate></item><item><title>单个进程内最多可以有多少个线程</title><link>https://blog.wangzhl.com/posts/max-number-of-threads-per-process/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在开发一个服务程序时，使用的是单个进程中多线程的模式，要为每个连接的设备分配一个线程。随着设备越来越多，分配的线程数量就不断上升，当线程数量达到一定值时程序就报错退出了。于是问题就来了，单个进程到底可以有多少个线程呢？&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/max-number-of-threads-per-process/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>process</category><category>thread</category><category>windows</category><guid>https://blog.wangzhl.com/posts/max-number-of-threads-per-process/</guid><pubDate>Fri, 06 Dec 2019 12:44:50 GMT</pubDate></item><item><title>Linux 常用的排查故障指令</title><link>https://blog.wangzhl.com/posts/linux-troubleshooting-commands/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文总结了常用的排查 linux 服务器故障的命令行指令，这些指令能够查看操作系统的实时状态信息，在排查问题时起到辅助作用。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/linux-troubleshooting-commands/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>shell</category><category>troubleshooting</category><guid>https://blog.wangzhl.com/posts/linux-troubleshooting-commands/</guid><pubDate>Sat, 30 Nov 2019 09:22:35 GMT</pubDate></item><item><title>Linux中修改程序的run path</title><link>https://blog.wangzhl.com/posts/linux-change-run-path-for-executable/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
对于动态库的加载，不同的操作系统有不同的搜索策略。在windows下，程序会优先加载同路径中的动态库，这是一个非常方便的特性。而在linux下，需要单独配置 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; 以实现上述类似特性。曾经困扰我很长一段时间的就是linux平台的动态库加载问题，最常出现的问题是程序启动时找不到所需要的动态库。在得知修改run path可以调整程序搜索动态库的路径时，一切都迎刃而解了。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/linux-change-run-path-for-executable/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>chrpath</category><category>elf</category><category>LD_LIBRARY_PATH</category><category>ldd</category><category>linux</category><category>rpath</category><category>run path</category><guid>https://blog.wangzhl.com/posts/linux-change-run-path-for-executable/</guid><pubDate>Fri, 22 Nov 2019 06:41:48 GMT</pubDate></item><item><title>在Linux的信号处理函数中不要进行锁相关操作</title><link>https://blog.wangzhl.com/posts/linux-signal-handler-callback-mutex/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在写一个linux程序，其中一个逻辑是要等待信号（signal），我使用了条件变量（condition variable）来完成这个操作，但是实际效果却是整个程序卡住了，经过查阅资料后得知在信号处理函数中是不能进行锁操作的。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/linux-signal-handler-callback-mutex/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>mutex</category><category>sigaction</category><category>signal</category><category>signal handler</category><category>sigtimedwait</category><category>sigwait</category><guid>https://blog.wangzhl.com/posts/linux-signal-handler-callback-mutex/</guid><pubDate>Sat, 26 Oct 2019 13:41:50 GMT</pubDate></item></channel></rss>