<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note</title><link>http://samsonwang.me/</link><description>Constraint &amp; Focus</description><atom:link href="http://samsonwang.me/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2018 &lt;a href="mailto:zl.wang@foxmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc/4.0/"&gt;&lt;img alt="知识共享许可协议" style="border-width:0; vertical-align:text-top;" src="https://i.creativecommons.org/l/by-nc/4.0/80x15.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Tue, 27 Mar 2018 15:55:30 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Linux常用命令行指令 - tcpdump</title><link>http://samsonwang.me/posts/linux-command-examples-tcpdump/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
tcpdump常用于网络抓包，能够将抓取的包保存下来，这样就能进一步深入分析。抓包保存的文件可以使用tcpdump进行查看，也可以借助第三方软件（如wireshark）进行辅助分析。&lt;br&gt;
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;1. 抓取指定网络设备上的包&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
抓取网卡eth0上的包&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -i eth0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;2. 限制抓包的数量&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
只抓取5个包&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -c 5 -i eth0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;3. 将抓取的包以ASCII的方式打印出来&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -A -i eth0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;4. 将抓取的包以十六进制的方式打印出来&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -XX -i eth0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;5. 对抓取到的包上打出更方便阅读的时间戳&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
增加 &lt;code&gt;-t&lt;/code&gt; 参数能够将抓取到的包中的时间以方便阅读的形式打印出来，使用 &lt;code&gt;-tttt&lt;/code&gt; 参数能够将包中的时间戳以更详细的方式打印出来。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -t -i eth0
tcpdump -tttt -i eth0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;6. 将抓取的包写入到文件中&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -w netdump.pcap -i eth0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-7" class="outline-2"&gt;
&lt;h2 id="sec-7"&gt;7. 读取抓到的包&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -r netdump.pcap
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-8" class="outline-2"&gt;
&lt;h2 id="sec-8"&gt;8. 在抓到的包中显示ip地址&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-8"&gt;
&lt;p&gt;
增加 &lt;code&gt;-n&lt;/code&gt; 参数不会解析主机名，增加 &lt;code&gt;-nn&lt;/code&gt; 参数不会解析主机名和端口名&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -n -i eth0
tcpdump -nn -i eth0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-9" class="outline-2"&gt;
&lt;h2 id="sec-9"&gt;9. 对抓取到的包显示更详细的信息&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-9"&gt;
&lt;p&gt;
参数 &lt;code&gt;-v&lt;/code&gt; 是verbose的缩写，以下命令表示对抓取到的包显示更详细的信息。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -v -i eth0
tcpdump -vv -i eth0
tcpdump -vvv -i eth0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-10" class="outline-2"&gt;
&lt;h2 id="sec-10"&gt;10. 对抓到的包进行协议类型过滤&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-10"&gt;
&lt;p&gt;
支持的协议类型有：fddi, tr, wlan, ip, ip6, arp, rarp, decnet, tcp, udp&lt;br&gt;
以下命令只会抓取网卡eth0上的arp包&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -i eth0 arp
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-11" class="outline-2"&gt;
&lt;h2 id="sec-11"&gt;11. 在抓包时对包进行大小过滤&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-11"&gt;
&lt;p&gt;
下面的命令会分别抓取大于1024字节和小于1024字节的包&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -i eth0 greater 1024
tcpdump -i eth0 less 1024
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-12" class="outline-2"&gt;
&lt;h2 id="sec-12"&gt;12. 抓取指定端口上的包&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-12"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -i eth0 port 22
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-13" class="outline-2"&gt;
&lt;h2 id="sec-13"&gt;13. 抓取发往指定目的和端口上包&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-13"&gt;
&lt;p&gt;
可以使用 &lt;code&gt;and&lt;/code&gt; 和 &lt;code&gt;or&lt;/code&gt; 对过滤条件进行组合以实现精确的抓包。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -w net_dump.pcap -i eth0 dst 10.181.140.216 and port 22
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-14" class="outline-2"&gt;
&lt;h2 id="sec-14"&gt;参考资料&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-14"&gt;
&lt;p&gt;
&lt;a href="https://danielmiessler.com/study/tcpdump/"&gt;https://danielmiessler.com/study/tcpdump/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.thegeekstuff.com/2010/08/tcpdump-command-examples/"&gt;https://www.thegeekstuff.com/2010/08/tcpdump-command-examples/&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>linux</category><guid>http://samsonwang.me/posts/linux-command-examples-tcpdump/</guid><pubDate>Sun, 25 Mar 2018 15:34:53 GMT</pubDate></item><item><title>Linux常用命令行指令 - nc</title><link>http://samsonwang.me/posts/linux-command-examples-nc/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
&lt;code&gt;nc&lt;/code&gt; 命令是 &lt;code&gt;netcat&lt;/code&gt; 的缩写，能够使用TCP或UDP协议读写网络连接中的数据，是一个方便可靠的调试工具。&lt;br&gt;
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;1. 基本 &lt;code&gt;C/S&lt;/code&gt; 模型&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
作为服务端建立监听&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nc -l 127.0.0.1 8060
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
作为客户端连接端口&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nc 172.0.0.1 8060
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
但是需要注意的是，该服务端只允许一个客户端连接进来。&lt;br&gt;
&lt;code&gt;nc&lt;/code&gt; 会默认以TCP协议运行，可以增加 &lt;code&gt;-u&lt;/code&gt; 参数转换为UDP协议。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;2. 文件传输&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
模拟客户端向服务端传输文件的示例代码如下，同理，也可以模拟服务端向客户端发送文件。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nc -l 1234  &amp;gt; filename.out
nc 127.0.0.1 1234 &amp;lt; fielname.in
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;3. 连接远程系统&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
已连接http服务器为例，在作为客户端连接以后，可以向服务器发送 &lt;code&gt;GET /HTTP/1.1&lt;/code&gt; 来获取网站的主页。&lt;br&gt;
示例代码如下&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print "GET /HTTP/1.0 \r\n"| nc host.example.com 80
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;4. 简易代理&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
将nc命令嵌套使用，可以将一个端口中的数据转发到目的ip和端口。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ncat -l 8080 | ncat 192.168.1.200 80
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
通过上面的命令能够将本机8080端口的数据转发到192.168.1.200的80端口上，但是这样是单向的。可以建立 &lt;code&gt;fifo&lt;/code&gt; 实现数据的双向传输。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkfifo ./fifo_temp
ncat -l 8080 0&amp;lt;fifo_temp | ncat 192.168.1.200 80 1&amp;gt;fifo_temp
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;5. 参考资料&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.linuxtechi.com/nc-ncat-command-examples-linux-systems/"&gt;linuxtech&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thegeekstuff.com/2012/04/nc-command-examples/?utm_source=feedburner"&gt;thegeekstuff&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.computerhope.com/unix/nc.htm"&gt;computerhope&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>linux</category><guid>http://samsonwang.me/posts/linux-command-examples-nc/</guid><pubDate>Sat, 24 Mar 2018 02:01:10 GMT</pubDate></item><item><title>Linux常用命令行指令 - lsof</title><link>http://samsonwang.me/posts/linux-command-examples-lsof/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
lsof是list open files的简称，用于列出系统中所有打开的文件。由于在linux系统下，所有 对象都是文件，所以这个指令十分有用。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
下面就给出了几种常见的用法，需要注意的是有些指令需要root权限执行。&lt;br&gt;
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;1. 查看打开指定文件的进程&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof /var/syslog.log
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;2. 查看指定目录下打开的文件&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof +D /home/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;3. 查看以指定进程名所有打开的文件&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
使用 &lt;code&gt;-c&lt;/code&gt; 命令能够查看指定进程名使用的文件，允许在一个命令行指令中使用多个 &lt;code&gt;-c&lt;/code&gt; 参数。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof -c procname
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;4. 查看使用指定挂载点的进程&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
在停止挂载某个目录时，系统会告诉我们“设备资源繁忙”，所以我们需要找出使用挂载点的程序，终止这些进程，解除目录的占用状态。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof /home
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
或&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof +D /home/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;5. 查看指定用户打开的文件&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof -u username
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
另外还可以进行反向过滤，在输出中不显示指定用户的文件，语法如下。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof -u ^username
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;6. 查看指定进程打开的文件&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof -p pid
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-7" class="outline-2"&gt;
&lt;h2 id="sec-7"&gt;7. 终止属于某个用户的所有进程&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kill `lsof -t -u username`
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
相似的，可以使用 &lt;code&gt;-t&lt;/code&gt; 参数打印使用某个文件的进程id。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof -t /var/log
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-8" class="outline-2"&gt;
&lt;h2 id="sec-8"&gt;8. 让结果同时满足多个选项&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-8"&gt;
&lt;p&gt;
默认情况下，多个参数是以或（or）进行操作的，可以使用 &lt;code&gt;-a&lt;/code&gt; 选项让结果同时满足多个参数。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof -a -u username -c procname
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-9" class="outline-2"&gt;
&lt;h2 id="sec-9"&gt;9. 让命令重复执行&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-9"&gt;
&lt;p&gt;
可以使用 &lt;code&gt;-r&lt;/code&gt; 参数让命令重复执行。以下命令会每隔5s执行一次，每次的执行结果会用 “====” 分割开。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof -u username -c procname -a -r5
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-10" class="outline-2"&gt;
&lt;h2 id="sec-10"&gt;10. 列出所有的网络连接&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-10"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof -i
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
让结果中的ip地址和端口号显示数字而不是英文别名&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof -i -Pn
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
显示所有的 &lt;code&gt;AF_UNIX&lt;/code&gt; socket&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof -U
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-11" class="outline-2"&gt;
&lt;h2 id="sec-11"&gt;11. 列出指定进程使用的网络连接&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-11"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof -i -a -p pid
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-12" class="outline-2"&gt;
&lt;h2 id="sec-12"&gt;12. 查看指定端口上的监听&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-12"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof -i :portid
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-13" class="outline-2"&gt;
&lt;h2 id="sec-13"&gt;13. 列出所有tcp和udp连接&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-13"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof -i tcp; lsof -i udp
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-14" class="outline-2"&gt;
&lt;h2 id="sec-14"&gt;14. 列出所有的网络文件系统&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-14"&gt;
&lt;p&gt;
网络文件系统（network file system）&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof -N -u username
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>linux</category><category>shell</category><guid>http://samsonwang.me/posts/linux-command-examples-lsof/</guid><pubDate>Wed, 21 Mar 2018 12:28:34 GMT</pubDate></item><item><title>重载、覆盖和隐藏的区别</title><link>http://samsonwang.me/posts/differences-among-overload-override-hide/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
&lt;b&gt;重载（overload）&lt;/b&gt; ：就是函数或者方法有相同的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。&lt;br&gt;
多个重载函数在调用的时候根据函数的参数来区别不同的函数。&lt;br&gt;
关键点：函数名相同，参数表不同&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;覆盖（override）&lt;/b&gt; ：是指在派生类中重新对基类中的虚函数重新实现，即函数名和参数都一样，只是函数的实现体不一样。&lt;br&gt;
关键词：派生类中，虚函数，函数名和参数表完全相同&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;隐藏（hide）&lt;/b&gt; ：派生类中的函数把基类中相同名字的函数屏蔽掉了。&lt;br&gt;
隐藏一词可以这么理解:在调用一个类的成员函数的时候,编译器会沿着类的继承链逐级的向上查找函数的定义,如果找到了那么就停止查找了,所以如果一个派生类和一个基类都有同一个同名(暂且不论参数是否相同)的函数,而编译器最终选择了在派生类中的函数,那么我们就说这个派生类的成员函数"隐藏"了基类的成员函数,也就是说它阻止了编译器继续向上查找函数的定义.&lt;br&gt;
&lt;/p&gt;


&lt;p&gt;
关于这三种情况的示例代码如下&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Base&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Base::f(float) "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Base::g(float) "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Base::h(float) "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Derived&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Base&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Derived::f(float) "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Derived::g(int) "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Derived::h(float) "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
从以上代码能够看出：&lt;br&gt;
（1）函数Derived::f(float)覆盖了Base::f(float)。&lt;br&gt;
（2）函数Derived::g(int)隐藏了Base::g(float)，而不是重载。&lt;br&gt;
（3）函数Derived::h(float)隐藏了Base::h(float)，而不是覆盖。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
考虑代码在运行时的结果：&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Derived&lt;/span&gt;  &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Derived&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Good : behavior depends solely on type of the object&lt;/span&gt;
  &lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.14f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Derived::f(float) 3.14&lt;/span&gt;
  &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.14f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Derived::f(float) 3.14&lt;/span&gt;

  &lt;span class="c1"&gt;// Bad : behavior depends on type of the pointer&lt;/span&gt;
  &lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.14f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Base::g(float) 3.14&lt;/span&gt;
  &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.14f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Derived::g(int) 3        (surprise!)&lt;/span&gt;

  &lt;span class="c1"&gt;// Bad : behavior depends on type of the pointer&lt;/span&gt;
  &lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.14f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Base::h(float) 3.14      (surprise!)&lt;/span&gt;
  &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.14f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Derived::h(float) 3.14&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
在第一种调用中，函数的行为取决于指针所指向的对象。在第二第三种调用中，函数的行为取决于指针的类型。所以说，隐藏破坏了面向对象编程中多态这一特性，会使得开发人员产生混乱。&lt;br&gt;
&lt;/p&gt;


&lt;p&gt;
&lt;b&gt;函数接口设计注意要点&lt;/b&gt;&lt;br&gt;
在设计基类的函数接口时，不要出现既是虚函数，又对该虚函数进行了重载的情况。这样会对派生类的多态函数实现造成不便。&lt;br&gt;
示例代码如下&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Base&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Derived&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Base&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
从以上代码能够看出：&lt;br&gt;
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;Derived::foo()&lt;/code&gt; 与 &lt;code&gt;Base::foo()&lt;/code&gt; 构成了多态关系&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Derived::foo()&lt;/code&gt; 隐藏了 &lt;code&gt;Base::foo(int)&lt;/code&gt;&lt;br&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
所以，如果派生类希望实现 &lt;code&gt;foo()&lt;/code&gt; 函数的多态，也就必须实现 &lt;code&gt;foo(int)&lt;/code&gt; 的多态，否则就会出现隐藏。&lt;br&gt;
如果在现有代码中已经发生了上述 &lt;code&gt;Base&lt;/code&gt; 的情况，在不改变原有代码的情况下，可以使用在派生类中使用这样的语法 &lt;code&gt;using Base::foo;&lt;/code&gt; ，这会将基类中所有的名为 &lt;code&gt;foo&lt;/code&gt; 的函数引入到派生类中来。&lt;br&gt;
&lt;/p&gt;</description><category>cpp</category><guid>http://samsonwang.me/posts/differences-among-overload-override-hide/</guid><pubDate>Mon, 19 Mar 2018 13:51:03 GMT</pubDate></item><item><title>关于Qt中使用中文编码的一些问题</title><link>http://samsonwang.me/posts/qt-chinese-encoding/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
Qt库作为一个开源库，并且支持多语言。在开发时需要考虑字符编码问题。&lt;br&gt;
我现在的使用Qt开发环境为VS2012+Qt5.1.1，所以一下所讨论的也是基于这个版本而言的。目前Qt5已经将 &lt;code&gt;tr()&lt;/code&gt; 删掉了。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;在windows下使用Qt库进行开发&lt;/b&gt;&lt;br&gt;
有两种主流开发环境:&lt;br&gt;
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;使用Qt Creator作为开发环境&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;使用Visual Studio + Visual Assist + Qt Visual Studio Addon作为开发环境&lt;br&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
目前我使用的就是第二种开发环境，鉴于在Windows平台下没有哪个开发环境能与Visual Studio相媲美。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;使用VS开发Qt程序时需要注意源文件的编码格式&lt;/b&gt;&lt;br&gt;
Qt5官方推荐的源文件编码格式为UTF-8，QString内部的编码格式就是UTF-8，使用QtCreator创建的源文件的编码格式也是UTF-8 without BOM。&lt;br&gt;
但是VS在中文操作系统上，如果不进行特殊的设置，默认创建的含有中文的源文件编码格式为gb3212。这样的原始字符串就是gb2312格式的，在使用时需要进行特殊转换，这样显示在界面上才不会乱码。&lt;br&gt;
推荐使用一下两种方法解决gb2312编码问题：&lt;br&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;QString::fromLocale8Bit()&lt;/code&gt; 会将gb2312编码的字符串转换为UTF-8格式以便存放在QString中。&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;QStringLiteral()&lt;/code&gt; 是一个宏定义，会在编译期将字符串实例化，对静态字符串使用这个字符串也是一个提高效率的方法(因为减少了运行时的内存申请开销)。&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;在VS中使用utf-8 with BOM的源文件格式&lt;/b&gt;&lt;br&gt;
如果使用了utf-8 with BOM的源文件格式，VS会将其中的字符串转换为gb2312编码的中文，这样是为了兼容旧版本的编译器。&lt;br&gt;
可以使用编译选项让VS编译器不进行这项转换，这样就可以直接使用字符串 &lt;code&gt;char*&lt;/code&gt; 初始化QString了。&lt;br&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;微软在VS2010中提供了 &lt;code&gt;#pragma execution_character_set("utf-8")&lt;/code&gt; 这样的编译选项，能够防止编译器进行文件编码转换，保证字符串保留utf-8格式。&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;VS2012 并不支持以上编译选项，VS2012将这个特性取消了&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;VS2015 可以使用 &lt;code&gt;/utf-8&lt;/code&gt; 让编译器能够识别 utf-8 without BOM格式的文件，并保留utf-8的字符串编码。&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;C++11的编码格式支持&lt;/b&gt;&lt;br&gt;
对于支持C++11标准的编译器，可以采用如下的写法产生utf-8格式的字符串。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;szMsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u8&lt;/span&gt;&lt;span class="s"&gt;"字符串"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>qt</category><category>visual studio</category><guid>http://samsonwang.me/posts/qt-chinese-encoding/</guid><pubDate>Wed, 28 Feb 2018 01:34:08 GMT</pubDate></item><item><title>为git设置socks5代理</title><link>http://samsonwang.me/posts/use-git-with-socks5-proxy/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
在某些时候，为了绕过网络封锁，在使用git时需要借助代理完成相关网络操作。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;一个可用的vpn代理是先决条件&lt;/b&gt;&lt;br&gt;
关于架设vpn的就不在此讨论了。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;将repo的链接由ssh改为为https&lt;/b&gt; （已经是https的repo跳过此步骤）&lt;br&gt;
只有https（http）的repo是支持代理的，所以如果现有的repo是使用ssh方式clone到本地的，需要修改其为https方式。&lt;br&gt;
需要修改 &lt;code&gt;repo_name/.git/config&lt;/code&gt; 中的url配置，将其中的 &lt;code&gt;git格式&lt;/code&gt; 改为 &lt;code&gt;https格式&lt;/code&gt; 。&lt;br&gt;
以github为例，需要将 &lt;code&gt;git@github.com:user_name/repo_name.git&lt;/code&gt; 改为 &lt;code&gt;https://github.com/user_name/repo_name.git&lt;/code&gt;&lt;br&gt;
可以使用 &lt;code&gt;sed&lt;/code&gt; 指令完成替换。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed -i 's/git@github.com:/git:\/\/github.com\//' ./.git/config
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;设置git使用代理&lt;/b&gt;&lt;br&gt;
将git配置为使用socks5代理。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global http.proxy 'socks5://127.0.0.1:1080'
git config --global https.proxy 'socks5://127.0.0.1:1080'
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;将登录信息保存下来&lt;/b&gt;&lt;br&gt;
使用https时，在推送时会要求验证用户名和密码，考虑将验证信息缓存下来。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global credential.helper cache
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
也可以考虑将用户名和密码永久保存为硬盘文件， &lt;b&gt;注意&lt;/b&gt; 使用这种配置会将密码保存在 ~ &lt;code&gt;/.git-cretidentials&lt;/code&gt; 文件中，仅推荐在个人电脑中将配置文件保存下来。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global credential.helper store
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;参考资料&lt;/b&gt;&lt;br&gt;
&lt;a href="https://stackoverflow.com/questions/5343068/is-there-a-way-to-skip-password-typing-when-using-https-on-github"&gt;stackoverflow question&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;</description><category>git</category><category>vpn</category><guid>http://samsonwang.me/posts/use-git-with-socks5-proxy/</guid><pubDate>Thu, 08 Feb 2018 01:26:07 GMT</pubDate></item><item><title>windows平台下的C++开发框架</title><link>http://samsonwang.me/posts/cpp-development-framework-on-windows/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
在开发windows应用程序时，经常会遇到win32、mfc、atl的函数。下面就对三种API（或者说是开发框架）进行了总结。&lt;br&gt;
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Win32开发框架&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
win32开发框架是最基础的函数接口，更接近操作系统底层。&lt;br&gt;
使用Win32接口的优点是程序的依赖最小，生成的可执行文件的体积也最小。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;MFC开发框架&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
MFC是Microsoft Foundation Class的缩写，将win32的相关接口按照OOP的思想封装了起来，目的是提供一个快速开发原生应用的框架。&lt;br&gt;
使用MFC开发的程序体型略显臃肿，而且MFC也比较陈旧了，并不推荐使用MFC进行开发。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;ATL开发框架&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
ATL是Active Template Library的缩写，是针对COM组件的开发实现的一套开发框架。ATL简化了ActiveX COM组件的开发。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>atl</category><category>cpp</category><category>mfc</category><category>win32</category><category>windows</category><guid>http://samsonwang.me/posts/cpp-development-framework-on-windows/</guid><pubDate>Wed, 07 Feb 2018 14:56:21 GMT</pubDate></item><item><title>使用emacs在目录中递归搜索字符串</title><link>http://samsonwang.me/posts/emacs-search-string-in-directory-recursively/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
对文件中的字符串搜索是开发中经常遇到的情景，下面就对常见的搜索字符串的方式进行了总结。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;对当前buffer进行搜索（单个文件）&lt;/b&gt;&lt;br&gt;
&lt;code&gt;C-s&lt;/code&gt; 向后搜索&lt;br&gt;
&lt;code&gt;C-r&lt;/code&gt; 向后搜索&lt;br&gt;
&lt;code&gt;M-s o&lt;/code&gt; 使用occur对当前buffer中的指定关键字进行统计&lt;br&gt;
在安装了helm以后可以使用 &lt;code&gt;helm-occur&lt;/code&gt; 完成当前buffer的搜索&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;对目录中的指定文件进行搜索（一个目录下的多个文件）&lt;/b&gt;&lt;br&gt;
&lt;code&gt;C-x d&lt;/code&gt; 进入dired模式，在dired模式中使用 &lt;code&gt;M-x &amp;lt;dired-do-find-regexp&amp;gt;&lt;/code&gt; (快捷键 &lt;code&gt;A&lt;/code&gt; )对标记的文件进行搜索。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;对目录中的所有文件进行递归搜索（一个目录下的所有文件和所有子目录中的文件）&lt;/b&gt;&lt;br&gt;
&lt;code&gt;M-x &amp;lt;rgrep&amp;gt;&lt;/code&gt; 能够对一个目录下所有的文件进行正则表达式匹配&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;注意事项&lt;/b&gt;&lt;br&gt;
在windows平台上使用grep和find指令时，需要借助仿linux环境中的程序完成，如cygwin中的程序。&lt;br&gt;
需要将程序的路径添加到系统环境变量path中，并且为了覆盖windows系统自带的find命令，需要将该路径放在系统find路径之前。&lt;br&gt;
tips： 对于安装了 &lt;code&gt;git bash&lt;/code&gt; 的同学，直接将其中的 &lt;code&gt;mingw64\bin&lt;/code&gt; 的绝对路径加入系统path中即可。&lt;br&gt;
&lt;/p&gt;</description><category>emacs</category><category>grep</category><guid>http://samsonwang.me/posts/emacs-search-string-in-directory-recursively/</guid><pubDate>Tue, 06 Feb 2018 13:28:14 GMT</pubDate></item><item><title>ss服务器的配置指南</title><link>http://samsonwang.me/posts/shadowsock-server-setup-guide/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
租一个服务器自己搭建梯子是科学上网方便稳定快捷的好方法。&lt;br&gt;
本文主要是自己部署vpn服务端的笔记，作为备忘留存下来。&lt;br&gt;
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;安装ss服务程序&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
安装环境为CentOS7, 需要使用python的包管理工具pip完成对ss-server的安装。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install m2crypto python-setuptools
sudo easy_install pip
sudo pip install shadowsocks
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;配置ss服务器&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
&lt;b&gt;配置文件示例&lt;/b&gt; : &lt;i&gt;shadowsocks.json&lt;/i&gt;&lt;br&gt;
这份配置中使用了多个端口作供ss-server使用&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
    "server":"your-server-ip",
    "local_address":"127.0.0.1",
    "local_port":1080,
    "port_password":
    {
	"32366":"shadowsocks",
	"32367":"shadowsocks",
	"32368":"shadowsocks",
	"32369":"shadowsocks",
	"52369":"shadowsocks"
    },
    "timeout":300,
    "method":"aes-256-cfb",
    "fast_open": false
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
&lt;b&gt;启动脚本示例&lt;/b&gt; : &lt;i&gt;ss.sh&lt;/i&gt;&lt;br&gt;
直接在命令行直接输入指令也能够完成ss服务的启动和停止，使用脚本只是为了方便一些。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#!/bin/bash

ss_start()
{
  ssserver -c /root/shadowsocks/shadowsocks.json -d start
}

ss_stop()
{
  ssserver -c /root/shadowsocks/shadowsocks.json -d stop
}

# shell script main
if [ "$#" -eq "0" ]; then
  ss_start
else
  case "$1" in
  start)
    ss_start
    exit;;
  stop)
    ss_stop
    exit;;
  esac
fi
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;增加系统启动项&lt;/b&gt;&lt;br&gt;
可以将启动脚本加入系统启动项，这样就能够保证在每次reboot后，服务都能自动开启。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>linux</category><category>shadowsocks</category><category>vpn</category><guid>http://samsonwang.me/posts/shadowsock-server-setup-guide/</guid><pubDate>Mon, 05 Feb 2018 14:57:35 GMT</pubDate></item><item><title>常用git操作备忘</title><link>http://samsonwang.me/posts/git-cheatsheet/</link><dc:creator>Samson Wang</dc:creator><description>&lt;p&gt;
update: 2018-02-15&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
对常用指令进行总结，方便以后遇到相同情况时查阅。&lt;br&gt;
&lt;/p&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;1 撤销与回退相关&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;1.1 修正最近的提交消息&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
&lt;b&gt;情景&lt;/b&gt; ：在最近的一次提交（ &lt;code&gt;git commit&lt;/code&gt; ）中输入的信息有误，并且这次提交没有被推送（ &lt;code&gt;git push&lt;/code&gt; ）到远程仓库。&lt;br&gt;
&lt;b&gt;方法&lt;/b&gt; ： &lt;code&gt;git commit --amend&lt;/code&gt; 或 &lt;code&gt;git commit --amend -m "correct_message"&lt;/code&gt;&lt;br&gt;
&lt;b&gt;说明&lt;/b&gt; ： &lt;code&gt;git commit --amend&lt;/code&gt; 会使用一个新的提交更新并替换最近的一次提交，如果有在临时区域（staged）的修改，也会合并提交；如果有新的提交信息，则会一并提交。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;1.2 撤销本地变更&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
&lt;b&gt;情景&lt;/b&gt; ：当无意中修改了一个文件，想要回退这个文件的修改时。&lt;br&gt;
&lt;b&gt;方法&lt;/b&gt; ： &lt;code&gt;git checkout -- &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;b&gt;说明&lt;/b&gt; ：这条指令会把该文件回退到某个git记录中的版本，git默认会回退到 &lt;code&gt;HEAD&lt;/code&gt; 版本。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;1.3 重置本地修改&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
&lt;b&gt;情景&lt;/b&gt; ：已经进行了多次提交，但是没有推送到版本库中，希望撤销这些提交。&lt;br&gt;
&lt;b&gt;方法&lt;/b&gt; ： &lt;code&gt;git reset &amp;lt;last good SHA&amp;gt;&lt;/code&gt; 或 &lt;code&gt;git reset --hard &amp;lt;last good SHA&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;b&gt;说明&lt;/b&gt; ： &lt;code&gt;git reset&lt;/code&gt; 会把本地代码恢复到没有提交（ &lt;code&gt;git commit&lt;/code&gt; ）的状态，做出的修改会保留。 &lt;code&gt;git reset --hard&lt;/code&gt; 会把这些修改丢弃掉。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;1.4 恢复被重置的本地修改&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
&lt;b&gt;情景&lt;/b&gt; ：在按照1.3中操作后，想恢复重置以前的状态。&lt;br&gt;
&lt;b&gt;方法&lt;/b&gt; ： &lt;code&gt;git reflog&lt;/code&gt; 后执行 &lt;code&gt;git reset&lt;/code&gt; 或 &lt;code&gt;git checkout&lt;/code&gt;&lt;br&gt;
&lt;b&gt;说明&lt;/b&gt; ： &lt;code&gt;git reflog&lt;/code&gt; 会呈现所有提交过的历史，是一个十分实用的功能。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;2 分支操作相关&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;2.1 创建一个本地分支并推送到远端&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
&lt;b&gt;方法&lt;/b&gt; ：&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git branch branch_name
git push origin branch_name
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;2.2 在本地创建一个远程分支&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
&lt;b&gt;方法&lt;/b&gt; ：&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git fetch origin
git checkout -b  branch_name origin/branch_name
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;2.3 在分支上进行进度迁移&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;p&gt;
&lt;b&gt;情景&lt;/b&gt; ： 进行了几次提交后，发现自己正在错误的分支上干活。&lt;br&gt;
&lt;b&gt;方法&lt;/b&gt; ：&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git branch feature
git reset --hard origin/master
git checkout feature
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
&lt;b&gt;原理&lt;/b&gt; ： 使用feature分支复制了当前分支，将当前分支回退到初始状态，在feature分支上接着干活。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;3 git submodule 相关操作&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-3-1" class="outline-3"&gt;
&lt;h3 id="sec-3-1"&gt;3.1 向当前repo中增加一个submodule&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submoudle add &amp;lt;module url&amp;gt; &amp;lt;local path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-2" class="outline-3"&gt;
&lt;h3 id="sec-3-2"&gt;3.2 初始化submodule&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;p&gt;
在将一个具有submodule的repo拉取到本地以后需要对submodule进行初始化&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule init
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-3" class="outline-3"&gt;
&lt;h3 id="sec-3-3"&gt;3.3 更新submodule&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-3"&gt;
&lt;p&gt;
在开发中可以直接进入submodule的目录对每一个submodule执行更新操作，也可以使用命令统一完成submodule的更新操作。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule update
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-4" class="outline-3"&gt;
&lt;h3 id="sec-3-4"&gt;3.4 删掉submodule&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-4"&gt;
&lt;p&gt;
对于不需要的submodule，可以将其删掉。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule rm &amp;lt;local/path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;终端配置&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
使用命令简称方便操作&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# git related
alias g='git status --short -b'
alias ga='git add'
alias gb='git branch'
alias gc='git commit -m'
alias gd='git diff'
alias gco='git checkout'
alias gps='git push'
alias gpl='git pull'
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cheatsheet</category><category>git</category><guid>http://samsonwang.me/posts/git-cheatsheet/</guid><pubDate>Fri, 19 Jan 2018 04:39:16 GMT</pubDate></item></channel></rss>