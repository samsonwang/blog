<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/blog/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note</title><link>https://samsonwang.github.io/blog/</link><description>Personal handnote on software development</description><atom:link href="https://samsonwang.github.io/blog/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2019 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;&lt;img alt="知识共享许可协议" style="padding-bottom:2px" src="https://i.creativecommons.org/l/by-nc/4.0/80x15.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Sun, 27 Oct 2019 07:58:36 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>在linux的信号处理函数中不要进行锁相关操作</title><link>https://samsonwang.github.io/blog/posts/linux-signal-handler-callback-mutex/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在写一个linux程序，其中一个逻辑是要等待信号（signal），我使用了条件变量（condition variable）来完成这个操作，但是实际效果却是整个程序卡住了，经过查阅资料后得知在信号处理函数中是不能进行锁操作的。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/linux-signal-handler-callback-mutex/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>mutex</category><category>signal handler</category><category>sigtimedwait</category><category>sigwait</category><guid>https://samsonwang.github.io/blog/posts/linux-signal-handler-callback-mutex/</guid><pubDate>Sat, 26 Oct 2019 13:41:50 GMT</pubDate></item><item><title>MSVC工程里Unicode字符集和多字节字符集选项</title><link>https://samsonwang.github.io/blog/posts/msvc-cpp-project-unicode-and-mbcs/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在Visual Studio的C++工程中，有个一选项可以设置当前工程的字符集，本文主要围绕着该设置置项展开。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/msvc-cpp-project-unicode-and-mbcs/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>charset</category><category>cpp</category><category>MBCS</category><category>unicode</category><category>windows</category><guid>https://samsonwang.github.io/blog/posts/msvc-cpp-project-unicode-and-mbcs/</guid><pubDate>Tue, 15 Oct 2019 12:44:03 GMT</pubDate></item><item><title>在gdb中以16进程的方式打印变量</title><link>https://samsonwang.github.io/blog/posts/gdb-print-variable-in-hex/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在gdb调试过程中可以通过 &lt;code&gt;print(p)&lt;/code&gt; 查看指定变量的内容。在默认情况下，数字是以10进制的形式显示的，但有时候我们想以16进制的形式查看该变量。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/gdb-print-variable-in-hex/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>gdb</category><category>linux</category><guid>https://samsonwang.github.io/blog/posts/gdb-print-variable-in-hex/</guid><pubDate>Sat, 12 Oct 2019 15:31:57 GMT</pubDate></item><item><title>排查Windows平台动态库和静态库链接失败问题</title><link>https://samsonwang.github.io/blog/posts/library-linking-error-on-windows/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近帮同事查了一个C++链接过程的问题，这个问题比较隐蔽，也非常有代表性，记录下来方便后面查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/library-linking-error-on-windows/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>dumpbin</category><category>linking</category><category>windows</category><guid>https://samsonwang.github.io/blog/posts/library-linking-error-on-windows/</guid><pubDate>Sun, 22 Sep 2019 02:22:09 GMT</pubDate></item><item><title>C++中delete关键字常见错误</title><link>https://samsonwang.github.io/blog/posts/cpp-delete-keyword-common-mistakes/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
C++中的delete关键字用于释放动态申请的内存，是使用频率非常高的关键字，本文将开发中常出现的错误加以总结，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/cpp-delete-keyword-common-mistakes/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>delete</category><guid>https://samsonwang.github.io/blog/posts/cpp-delete-keyword-common-mistakes/</guid><pubDate>Mon, 01 Jul 2019 12:36:31 GMT</pubDate></item><item><title>位域与联合体的内存布局</title><link>https://samsonwang.github.io/blog/posts/bit-field-and-union-type/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
位域（bit field）与联合体（union）都可以用来控制内存布局。本文主要阐述的内存可总结为：位域的内存布局是编译器决定的，而联合体的内存布局是由大小端决定的。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/bit-field-and-union-type/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>bit field</category><category>c</category><category>cpp</category><category>endian</category><category>memory layout</category><category>union</category><guid>https://samsonwang.github.io/blog/posts/bit-field-and-union-type/</guid><pubDate>Tue, 21 May 2019 08:35:02 GMT</pubDate></item><item><title>redis中的数据结构</title><link>https://samsonwang.github.io/blog/posts/redis-data-structure/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文主要介绍了 redis 中的底层数据结构类型，并比较了操作这些数据时的时间复杂度。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/redis-data-structure/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>data structure</category><category>nosql</category><category>redis</category><guid>https://samsonwang.github.io/blog/posts/redis-data-structure/</guid><pubDate>Mon, 29 Apr 2019 01:37:50 GMT</pubDate></item><item><title>Makefile 要点备忘</title><link>https://samsonwang.github.io/blog/posts/makefile_cheatsheet/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文包含常用的 Makefile 语法，在这里总结一下，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/makefile_cheatsheet/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cheatsheet</category><category>makefile</category><category>not-index</category><guid>https://samsonwang.github.io/blog/posts/makefile_cheatsheet/</guid><pubDate>Sun, 28 Apr 2019 02:06:38 GMT</pubDate></item><item><title>redis基础</title><link>https://samsonwang.github.io/blog/posts/redis-fundamental/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文是 &lt;a href="https://www.tutorialspoint.com/redis/"&gt;tutorialspoint&lt;/a&gt; 提供的 &lt;a href="https://redis.io/"&gt;redis&lt;/a&gt; 教程的学习笔记。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/redis-fundamental/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>memcached</category><category>nosql</category><category>redis</category><guid>https://samsonwang.github.io/blog/posts/redis-fundamental/</guid><pubDate>Wed, 24 Apr 2019 03:01:09 GMT</pubDate></item><item><title>深入探索C++内存模型（4）</title><link>https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-4/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
第四章是Function语意学，这一章主要介绍类相关函数的底层实现原理，就虚函数进行了展开讨论，通过实际代码的测试结果验证分析结论。对 inline 函数可能会出现的问题进行了分析，对 inline 函数的使用提出了指导意见。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-4/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>digest</category><category>Lippman</category><category>memory layout</category><category>object model</category><guid>https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-4/</guid><pubDate>Mon, 22 Apr 2019 02:27:22 GMT</pubDate></item></channel></rss>