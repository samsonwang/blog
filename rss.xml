<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/blog/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note</title><link>https://samsonwang.github.io/blog/</link><description>Personal handnote on software development</description><atom:link href="https://samsonwang.github.io/blog/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2019 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;&lt;img alt="知识共享许可协议" style="padding-bottom:2px" src="https://i.creativecommons.org/l/by-nc/4.0/80x15.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Sun, 29 Sep 2019 15:14:07 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>排查Windows平台动态库和静态库链接失败问题</title><link>https://samsonwang.github.io/blog/posts/library-linking-error-on-windows/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近帮同事查了一个C++链接过程的问题，这个问题比较隐蔽，也非常有代表性。在软件开发中，通常将相似或具有关联性的代码归入一个模块中，这个模块会以动态库或静态库的形式独立出来。每个静态库或动态库会作为独立的编译单元生成目标文件，这些目标文件最终会被链接在一起。这些静态库和动态库之间大多具有依赖关系，在链接过程中如果所依赖的函数出现了缺失就会链接失败。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/library-linking-error-on-windows/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>dumpbin</category><category>linking</category><category>windows</category><guid>https://samsonwang.github.io/blog/posts/library-linking-error-on-windows/</guid><pubDate>Sun, 22 Sep 2019 02:22:09 GMT</pubDate></item><item><title>C++中delete关键字常见错误</title><link>https://samsonwang.github.io/blog/posts/cpp-delete-keyword-common-mistakes/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
C++中的delete关键字用于释放动态申请的内存，是使用频率非常高的关键字，本文将开发中常出现的错误加以总结，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/cpp-delete-keyword-common-mistakes/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>delete</category><guid>https://samsonwang.github.io/blog/posts/cpp-delete-keyword-common-mistakes/</guid><pubDate>Mon, 01 Jul 2019 12:36:31 GMT</pubDate></item><item><title>位域与联合体的内存布局</title><link>https://samsonwang.github.io/blog/posts/bit-field-and-union-type/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
位域（bit field）与联合体（union）都可以用来控制内存布局。本文主要阐述的内存可总结为：位域的内存布局是编译器决定的，而联合体的内存布局是由大小端决定的。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/bit-field-and-union-type/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>bit field</category><category>c</category><category>cpp</category><category>endian</category><category>memory layout</category><category>union</category><guid>https://samsonwang.github.io/blog/posts/bit-field-and-union-type/</guid><pubDate>Tue, 21 May 2019 08:35:02 GMT</pubDate></item><item><title>redis中的数据结构</title><link>https://samsonwang.github.io/blog/posts/redis-data-structure/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文主要介绍了 redis 中的底层数据结构类型，并比较了操作这些数据时的时间复杂度。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/redis-data-structure/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>data structure</category><category>nosql</category><category>redis</category><guid>https://samsonwang.github.io/blog/posts/redis-data-structure/</guid><pubDate>Mon, 29 Apr 2019 01:37:50 GMT</pubDate></item><item><title>Makefile 要点备忘</title><link>https://samsonwang.github.io/blog/posts/makefile_cheatsheet/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文包含常用的 Makefile 语法，在这里总结一下，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/makefile_cheatsheet/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cheatsheet</category><category>makefile</category><category>not-index</category><guid>https://samsonwang.github.io/blog/posts/makefile_cheatsheet/</guid><pubDate>Sun, 28 Apr 2019 02:06:38 GMT</pubDate></item><item><title>redis基础</title><link>https://samsonwang.github.io/blog/posts/redis-fundamental/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文是 &lt;a href="https://www.tutorialspoint.com/redis/"&gt;tutorialspoint&lt;/a&gt; 提供的 &lt;a href="https://redis.io/"&gt;redis&lt;/a&gt; 教程的学习笔记。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/redis-fundamental/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>memcached</category><category>nosql</category><category>redis</category><guid>https://samsonwang.github.io/blog/posts/redis-fundamental/</guid><pubDate>Wed, 24 Apr 2019 03:01:09 GMT</pubDate></item><item><title>深入探索C++内存模型（4）</title><link>https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-4/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
第四章是Function语意学，这一章主要介绍类相关函数的底层实现原理，就虚函数进行了展开讨论，通过实际代码的测试结果验证分析结论。对 inline 函数可能会出现的问题进行了分析，对 inline 函数的使用提出了指导意见。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-4/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>digest</category><category>Lippman</category><category>memory layout</category><category>object model</category><guid>https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-4/</guid><pubDate>Mon, 22 Apr 2019 02:27:22 GMT</pubDate></item><item><title>深入探索C++内存模型（3）</title><link>https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-3/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
第三章的标题是Data语意学，这一章主要的研究对象是类的成员变量相关的操作原理，静态成员变量与非静态成员变量，单一继承、多重继承、虚继承对成员变量内存分布和存取性能的影响。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-3/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>digest</category><category>Lippman</category><category>memory layout</category><category>object model</category><guid>https://samsonwang.github.io/blog/posts/inside-the-cpp-object-model-3/</guid><pubDate>Fri, 12 Apr 2019 05:13:16 GMT</pubDate></item><item><title>在Linux终端中进行递归搜索</title><link>https://samsonwang.github.io/blog/posts/linux-command-examples-grep-and-find/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
有时候我们需要对某个目录中的所有文件进行递归式搜索。递归搜索，即搜索该目录中的所有文件和其二级目录下的所有文件，依此类推。本文给出了两种实现思路，分别使用 &lt;code&gt;grep&lt;/code&gt; 和 &lt;code&gt;find&lt;/code&gt; 命令。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/linux-command-examples-grep-and-find/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>find</category><category>grep</category><category>linux</category><category>search</category><guid>https://samsonwang.github.io/blog/posts/linux-command-examples-grep-and-find/</guid><pubDate>Thu, 11 Apr 2019 05:47:28 GMT</pubDate></item><item><title>初识docker</title><link>https://samsonwang.github.io/blog/posts/docker-for-beginners/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
这篇文章是 &lt;a href="https://docker-curriculum.com/"&gt;docker-curriculum.com&lt;/a&gt; 的学习笔记，包含 docker 的基础概念和入门用法。通过阅读该教程，我对 docker 以及容器化的软件开发、分发和部署有了初步的认识。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://samsonwang.github.io/blog/posts/docker-for-beginners/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>beginner</category><category>cheatsheet</category><category>docker</category><guid>https://samsonwang.github.io/blog/posts/docker-for-beginners/</guid><pubDate>Wed, 03 Apr 2019 03:19:59 GMT</pubDate></item></channel></rss>