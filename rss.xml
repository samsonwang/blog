<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note</title><link>https://blog.wangzhl.com/</link><description>Personal handnote on software development</description><atom:link href="https://blog.wangzhl.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2021 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;
&lt;img alt="cc-by-nc 4.0" style="padding-bottom:2px" src="/images/cc-by-nc.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Tue, 23 Nov 2021 01:14:56 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>结构体字节对齐的陷阱</title><link>https://blog.wangzhl.com/posts/cpp-pragma-pack-pitfall/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;code&gt;pragma pack&lt;/code&gt; 的功能是设定结构体内成员变量的字节对齐方式。它在使用时有一个易错点，而且出错后排查起来还非常不容易。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/cpp-pragma-pack-pitfall/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>cpp</category><guid>https://blog.wangzhl.com/posts/cpp-pragma-pack-pitfall/</guid><pubDate>Tue, 16 Nov 2021 03:27:35 GMT</pubDate></item><item><title>如何检测TCP连接的异常断开</title><link>https://blog.wangzhl.com/posts/how-to-detect-tcp-abnormal-disconnection/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在以往的开发中，我会通过 &lt;code&gt;recv()&lt;/code&gt; 接口的返回值来判断连接是否断开。但有时候我发现TCP连接已经无法正常收发数据了 &lt;code&gt;recv()&lt;/code&gt; 的返回值仍然不是0。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/how-to-detect-tcp-abnormal-disconnection/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>network</category><category>tcp</category><guid>https://blog.wangzhl.com/posts/how-to-detect-tcp-abnormal-disconnection/</guid><pubDate>Mon, 08 Nov 2021 02:52:34 GMT</pubDate></item><item><title>由new创建的指针不需要检查nullptr</title><link>https://blog.wangzhl.com/posts/check-for-nullptr-after-new-operator/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
我们会检查空指针来判断指针是否有效。一直以来，在申请动态内存后，我都会习惯性地检查得到的指针是否为空，但是查阅了一些资料后发现这个操作是多余的。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/check-for-nullptr-after-new-operator/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><guid>https://blog.wangzhl.com/posts/check-for-nullptr-after-new-operator/</guid><pubDate>Fri, 30 Jul 2021 05:13:34 GMT</pubDate></item><item><title>在运行时获取动态库的路径</title><link>https://blog.wangzhl.com/posts/get-runtime-dll-path/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在开发一个动态库，这个动态库需要在运行时动态地加载另一个动态库。在库发布时会同时提供这两个动态库。库的使用者会主动加载第一个动态库，问题出现在第一个动态库加载第二个动态库时，如何确定第二个动态库的位置。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/get-runtime-dll-path/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>cpp</category><category>linux</category><category>windows</category><guid>https://blog.wangzhl.com/posts/get-runtime-dll-path/</guid><pubDate>Fri, 11 Jun 2021 10:19:06 GMT</pubDate></item><item><title>C++头文件的引用顺序</title><link>https://blog.wangzhl.com/posts/cpp-header-include-sequence/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
一般在C++开发中，会使用头文件（ &lt;code&gt;.h/hpp&lt;/code&gt; ）和源文件（ &lt;code&gt;.cpp/cxx&lt;/code&gt; ）将函数的声明和实现分开。当需要使用某个函数时，将声明函数所在的头文件引用进来即可。在较复杂的项目中会引用很多头文件，这些头文件可能来自于标准库、操作系统相关库、第三方库和自身项目。在实际开发过程中，多个头文件的引用顺序通常并不会有很大的影响；但是从编码风格和项目维护等方面考虑，头文件的引用顺序确是值得注意的。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/cpp-header-include-sequence/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><guid>https://blog.wangzhl.com/posts/cpp-header-include-sequence/</guid><pubDate>Fri, 28 May 2021 13:37:57 GMT</pubDate></item><item><title>常见的中文乱码示例</title><link>https://blog.wangzhl.com/posts/chinese-garbled-text-demo/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
中文乱码通常是由字符集不匹配导致的。例如，以utf-8字符集保存的文本以gbk方式打开就会出现乱码。有网友将常见的乱码情况总结成了表格，我将其保存下来，以后再遇到乱码时查阅起来就更加方便了。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/chinese-garbled-text-demo/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>garble</category><category>gbk</category><category>utf-8</category><guid>https://blog.wangzhl.com/posts/chinese-garbled-text-demo/</guid><pubDate>Thu, 31 Dec 2020 08:01:50 GMT</pubDate></item><item><title>为指定目录和文件创建gtags</title><link>https://blog.wangzhl.com/posts/gtags-for-specified-files-and-directories/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
GNU Global 是一个非常好用的代码索引工具，我在emacs中使用它进行代码跳转，本文介绍了使用中的一个小技巧。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/gtags-for-specified-files-and-directories/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>find</category><category>global</category><category>gtags</category><category>shell</category><guid>https://blog.wangzhl.com/posts/gtags-for-specified-files-and-directories/</guid><pubDate>Mon, 14 Dec 2020 14:34:26 GMT</pubDate></item><item><title>处理Linux信号需要注意的几个问题</title><link>https://blog.wangzhl.com/posts/linux-signal-programming-tips/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
Linux中的信号（signal）是一个非常实用的功能，进程间能发送信号，内核也能向进程发送信号。本文总结了在进行信号编程时容易忽略的几个问题，方便后续开发过程中查阅。&lt;br&gt;
&lt;/p&gt;


&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/linux-signal-programming-tips/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>multi-thread</category><category>sigmask</category><category>signal</category><category>tips</category><guid>https://blog.wangzhl.com/posts/linux-signal-programming-tips/</guid><pubDate>Mon, 09 Nov 2020 14:01:35 GMT</pubDate></item><item><title>静态初始化顺序问题</title><link>https://blog.wangzhl.com/posts/static-initialization-order-problem/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文介绍了静态变量构造顺序和析构顺序所带来的一系列问题，由于这些问题的出现条件都比较特殊，它们在使用中常常会被忽略。但是在设计和开发中这些问题却是不可忽略的，最严重的可能导致程序崩溃。在开发时注意了这些问题后，你的代码会更加稳健。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/static-initialization-order-problem/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>singleton</category><category>static</category><guid>https://blog.wangzhl.com/posts/static-initialization-order-problem/</guid><pubDate>Wed, 21 Oct 2020 14:54:26 GMT</pubDate></item><item><title>使用迭代器和下标访问C++容器的比较</title><link>https://blog.wangzhl.com/posts/cpp-access-container-by-iterator-or-position/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在遍历一个STL数组容器（ &lt;code&gt;vector&lt;/code&gt; ）时，可以使用迭代器方式，也可以使用下标（索引）方式。迭代器提供了一个非常方便的访问容器元素的方式，有一种行为（behavioral）设计模式就叫做迭代器模式，这种设计模式提供复杂数据结构的顺序遍历方法，同时不会暴露内部数据结构的细节。下标访问是从C语言数组传承而来的，C++标准库的数组容器也同时提供了下标访问的操作符重载。本文从运行效率和代码风格两方面比较了二者的差异。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/cpp-access-container-by-iterator-or-position/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>iterator</category><guid>https://blog.wangzhl.com/posts/cpp-access-container-by-iterator-or-position/</guid><pubDate>Fri, 09 Oct 2020 08:25:52 GMT</pubDate></item></channel></rss>