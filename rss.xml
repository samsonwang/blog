<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note</title><link>https://blog.wangzhl.com/</link><description>Personal handnote on software development</description><atom:link href="https://blog.wangzhl.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2020 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;
&lt;img alt="cc-by-nc 4.0" style="padding-bottom:2px" src="/images/cc-by-nc.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Tue, 21 Apr 2020 14:46:26 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>时间轮算法</title><link>https://blog.wangzhl.com/posts/timing-wheel-algorithm/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在之前的一篇 &lt;a href="https://blog.wangzhl.com/posts/how-to-implement-a-timer/" class="post-url"&gt;文章&lt;/a&gt; 中谈到了定时器的基本实现原理，其中提到了几种定时器的调度算法。当需要处理的定时器越来越多时，那些调度策略就不再适合了。本篇文章可以看作是前面文章的拓展，主要展开讲时间轮算法的思路和它的变体。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/timing-wheel-algorithm/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>algorithm</category><category>timer</category><category>timing wheel</category><guid>https://blog.wangzhl.com/posts/timing-wheel-algorithm/</guid><pubDate>Sat, 18 Apr 2020 01:58:19 GMT</pubDate></item><item><title>Windows平台下System32和SysWOW64文件夹</title><link>https://blog.wangzhl.com/posts/windows-system32-and-syswow64/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在64位的Windows操作系统下，你会发现在System32目录存放的是64位的程序，而SysWOW64目录存放的是32位的程序。本文围绕着这个进行了展开，介绍了Window系统32位和64位的相关知识。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/windows-system32-and-syswow64/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>32bit</category><category>64bit</category><category>sysnative</category><category>system32</category><category>syswow64</category><category>windows</category><guid>https://blog.wangzhl.com/posts/windows-system32-and-syswow64/</guid><pubDate>Tue, 14 Apr 2020 14:21:54 GMT</pubDate></item><item><title>如何实现一个定时器</title><link>https://blog.wangzhl.com/posts/how-to-implement-a-timer/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在以前的一次面试中，我被问到该如何实现一个定时器，当时我并没有思考过这个问题，所以回答的并不令人满意。在日常的开发中，一个需要定时执行的任务是很常见的。我认为这个问题比较有意义，也非常具有代表性。于是，我查阅了一些资料，并整理出这篇博客。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/how-to-implement-a-timer/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>alarm</category><category>c</category><category>cpp</category><category>linux</category><category>signal</category><category>timer</category><category>timerfd</category><guid>https://blog.wangzhl.com/posts/how-to-implement-a-timer/</guid><pubDate>Sat, 11 Apr 2020 01:10:09 GMT</pubDate></item><item><title>在git中撤回最后一次本地提交</title><link>https://blog.wangzhl.com/posts/git-undo-last-local-commit/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
有时候在git中进行了一次提交，这次提交还没有被推送到服务器上，如果这时发现了一些错误，想进行修正怎么办？本文记录了撤回这次提交的步骤，以备不时之需。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/git-undo-last-local-commit/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cheatsheet</category><category>git</category><category>tips</category><guid>https://blog.wangzhl.com/posts/git-undo-last-local-commit/</guid><pubDate>Sun, 29 Mar 2020 08:42:24 GMT</pubDate></item><item><title>网络编程中的Reactor和Proactor模式</title><link>https://blog.wangzhl.com/posts/network-programming-reactor-and-proactor/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文介绍了两种常用的网络编程模式：Reactor模式和Proactor模式。这两种设计模式比较相似，它们的典型应用案例都是处理网络编程的并发请求，但是它们在具体的请求分派方式上又有区别。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/network-programming-reactor-and-proactor/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>design pattern</category><category>network</category><category>proactor</category><category>reactor</category><guid>https://blog.wangzhl.com/posts/network-programming-reactor-and-proactor/</guid><pubDate>Sun, 15 Mar 2020 11:58:43 GMT</pubDate></item><item><title>Qt程序中OLE错误的调试记录</title><link>https://blog.wangzhl.com/posts/debug-qt-ole-error/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近解决了一个Launchy的 &lt;a href="https://github.com/samsonwang/LaunchyQt/issues/22"&gt;bug&lt;/a&gt; ，通过剪贴版向excel拷贝内容时会报OLE错误。我认为这个bug的排查过程比较有意义，在此记录下来。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/debug-qt-ole-error/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>ole</category><category>qt</category><category>windows</category><guid>https://blog.wangzhl.com/posts/debug-qt-ole-error/</guid><pubDate>Sat, 08 Feb 2020 01:37:33 GMT</pubDate></item><item><title>软件设计模式-门面模式</title><link>https://blog.wangzhl.com/posts/facade-design-pattern/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在看一些开源的日志库时了解到了门面模式，查了些资料学习了一下。门面模式是我们在设计中经常会使用到的模式，只是在以前的开发中并没有意识到这个是门面模式。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/facade-design-pattern/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>design pattern</category><category>facade</category><guid>https://blog.wangzhl.com/posts/facade-design-pattern/</guid><pubDate>Mon, 13 Jan 2020 01:01:26 GMT</pubDate></item><item><title>在Linux中关闭防火墙</title><link>https://blog.wangzhl.com/posts/linux-turn-off-firewall/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文主要介绍了firewalld、ufw和iptables防火墙的关闭方法，为了方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/linux-turn-off-firewall/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>firewall</category><category>linux</category><category>ufw</category><guid>https://blog.wangzhl.com/posts/linux-turn-off-firewall/</guid><pubDate>Wed, 01 Jan 2020 00:41:00 GMT</pubDate></item><item><title>Windows常用命令行指令dumpbin</title><link>https://blog.wangzhl.com/posts/windows-command-examples-dumpbin/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在Windows平台下，dumpbin是一个非常有用的命令行工具，主要用于查看可执行程序和动态库的内部信息。本文总结了dumpbin的几种常见用法，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/windows-command-examples-dumpbin/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>coff</category><category>dumpbin</category><category>windows</category><guid>https://blog.wangzhl.com/posts/windows-command-examples-dumpbin/</guid><pubDate>Fri, 27 Dec 2019 10:25:23 GMT</pubDate></item><item><title>gpg操作备忘</title><link>https://blog.wangzhl.com/posts/gnu-private-guard-cheatsheet/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
gpg的全称是gnu privacy guard，用于实现网络传输时的加密和解密。它有点类似于ssh的加解密过程，都有公钥和私钥，使用私钥加密公钥解密。我有一个应用场景需要在emacs中自动对org mode进行加密，使用了gpg完成加密过程。本文主要总结了gpg的常用命令。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/gnu-private-guard-cheatsheet/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cheatsheet</category><category>gnu</category><category>gpg</category><category>linux</category><guid>https://blog.wangzhl.com/posts/gnu-private-guard-cheatsheet/</guid><pubDate>Fri, 20 Dec 2019 13:33:33 GMT</pubDate></item></channel></rss>