<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note</title><link>https://blog.wangzhl.com</link><description>Personal handnote on software development</description><atom:link href="https://blog.wangzhl.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2020 &lt;a href="mailto:wangzhilv@gmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;&lt;img alt="知识共享许可协议" style="padding-bottom:2px" src="https://i.creativecommons.org/l/by-nc/4.0/80x15.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Tue, 10 Mar 2020 08:57:22 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Qt程序中OLE错误的调试记录</title><link>https://blog.wangzhl.com/posts/debug-qt-ole-error/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近解决了一个Launchy的 &lt;a href="https://github.com/samsonwang/LaunchyQt/issues/22"&gt;bug&lt;/a&gt; ，通过剪贴版向excel拷贝内容时会报OLE错误。我认为这个bug的排查过程比较有意义，在此记录下来。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/debug-qt-ole-error/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cpp</category><category>ole</category><category>qt</category><category>windows</category><guid>https://blog.wangzhl.com/posts/debug-qt-ole-error/</guid><pubDate>Sat, 08 Feb 2020 01:37:33 GMT</pubDate></item><item><title>软件设计模式-门面模式</title><link>https://blog.wangzhl.com/posts/facade-design-pattern/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在看一些开源的日志库时了解到了门面模式，查了些资料学习了一下。门面模式是我们在设计中经常会使用到的模式，只是在以前的开发中并没有意识到这个是门面模式。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/facade-design-pattern/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>design pattern</category><category>facade</category><guid>https://blog.wangzhl.com/posts/facade-design-pattern/</guid><pubDate>Mon, 13 Jan 2020 01:01:26 GMT</pubDate></item><item><title>在Linux中关闭防火墙</title><link>https://blog.wangzhl.com/posts/linux-turn-off-firewall/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文主要介绍了firewalld、ufw和iptables防火墙的关闭方法，为了方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/linux-turn-off-firewall/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>firewall</category><category>linux</category><category>ufw</category><guid>https://blog.wangzhl.com/posts/linux-turn-off-firewall/</guid><pubDate>Wed, 01 Jan 2020 00:41:00 GMT</pubDate></item><item><title>Windows常用命令行指令dumpbin</title><link>https://blog.wangzhl.com/posts/windows-command-examples-dumpbin/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在Windows平台下，dumpbin 是一个非常有用的命令行工具，主要用于观察可执行程序和动态库。本文总结了dumpbin的常见用法，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/windows-command-examples-dumpbin/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>dumpbin</category><category>windows</category><guid>https://blog.wangzhl.com/posts/windows-command-examples-dumpbin/</guid><pubDate>Fri, 27 Dec 2019 10:25:23 GMT</pubDate></item><item><title>gpg操作备忘</title><link>https://blog.wangzhl.com/posts/gnu-private-guard-cheatsheet/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
gpg的全称是gnu privacy guard，用于实现网络传输时的加密和解密。它有点类似于ssh的加解密过程，都有公钥和私钥，使用私钥加密公钥解密。我有一个应用场景需要在emacs中自动对org mode进行加密，使用了gpg完成加密过程。本文主要总结了gpg的常用命令。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/gnu-private-guard-cheatsheet/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cheatsheet</category><category>gnu</category><category>gpg</category><category>linux</category><guid>https://blog.wangzhl.com/posts/gnu-private-guard-cheatsheet/</guid><pubDate>Fri, 20 Dec 2019 13:33:33 GMT</pubDate></item><item><title>文件操作函数接口的比较</title><link>https://blog.wangzhl.com/posts/fopen-api-compare/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在维护一个老项目时发现，该程序的日志在程序运行时是不能够被其他程序打开的，也就不能通过日志实时地观察程序的运行状态。在我的印象里，我一直认为打开的文件都是共享的，这应该是个错觉。本篇日志主要总结了在打开一个文件时所使用函数接口，方便以后查阅。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/fopen-api-compare/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>c11</category><category>cpp</category><category>cpp11</category><category>file</category><category>windows</category><guid>https://blog.wangzhl.com/posts/fopen-api-compare/</guid><pubDate>Thu, 19 Dec 2019 14:08:11 GMT</pubDate></item><item><title>为什么条件变量需要与互斥锁配合使用</title><link>https://blog.wangzhl.com/posts/why-condition-variable-requires-mutex/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
条件变量（condition variable）是常用的线程同步技术，通常用于让线程阻塞并等待某个条件满足。它需要与互斥锁搭配使用，但是你有想过为什么需要搭配一个互斥锁呢？&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/why-condition-variable-requires-mutex/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>boost</category><category>condition variable</category><category>cpp</category><category>cpp11</category><category>mutex</category><category>thread</category><guid>https://blog.wangzhl.com/posts/why-condition-variable-requires-mutex/</guid><pubDate>Thu, 12 Dec 2019 14:38:41 GMT</pubDate></item><item><title>单个进程内最多可以有多少个线程</title><link>https://blog.wangzhl.com/posts/max-number-of-threads-per-process/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
在开发一个服务程序时，使用的是单个进程中多线程的模式，要为每个连接的设备分配一个线程。随着设备越来越多，分配的线程数量就不断上升，当线程数量达到一定值时程序就报错退出了。于是问题就来了，单个进程到底可以有多少个线程呢？&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/max-number-of-threads-per-process/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>process</category><category>thread</category><category>windows</category><guid>https://blog.wangzhl.com/posts/max-number-of-threads-per-process/</guid><pubDate>Fri, 06 Dec 2019 12:44:50 GMT</pubDate></item><item><title>Linux 常用的排查故障指令</title><link>https://blog.wangzhl.com/posts/linux-troubleshooting-commands/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
本文总结了常用的排查 linux 服务器故障的命令行指令，这些指令能够查看操作系统的实时状态信息，在排查问题时起到辅助作用。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/linux-troubleshooting-commands/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>shell</category><category>troubleshooting</category><guid>https://blog.wangzhl.com/posts/linux-troubleshooting-commands/</guid><pubDate>Sat, 30 Nov 2019 09:22:35 GMT</pubDate></item><item><title>linux中修改程序的run path</title><link>https://blog.wangzhl.com/posts/linux-change-run-path-for-executable/</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
对于动态库的加载，不同的操作系统有不同的搜索策略。在windows下，程序会优先加载同路径中的动态库，这是一个非常方便的特性。而在linux下，需要单独配置 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; 以实现上述类似特性。曾经困扰我很长一段时间的就是linux平台的动态库加载问题，最常出现的问题是程序启动时找不到所需要的动态库。在得知修改run path可以调整程序搜索动态库的路径时，一切都迎刃而解了。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.wangzhl.com/posts/linux-change-run-path-for-executable/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>chrpath</category><category>elf</category><category>linux</category><category>rpath</category><guid>https://blog.wangzhl.com/posts/linux-change-run-path-for-executable/</guid><pubDate>Fri, 22 Nov 2019 06:41:48 GMT</pubDate></item></channel></rss>