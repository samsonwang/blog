<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack Note (Posts by Samson Wang)</title><link>http://samsonwang.me/</link><description></description><atom:link href="http://samsonwang.me/authors/samson-wang.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017-2018 &lt;a href="mailto:zl.wang@foxmail.com"&gt;Samson Wang&lt;/a&gt; 
&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc/4.0/"&gt;&lt;img alt="知识共享许可协议" style="border-width:0; vertical-align:text-top;" src="https://i.creativecommons.org/l/by-nc/4.0/80x15.png" /&gt;&lt;/a&gt;
</copyright><lastBuildDate>Fri, 12 Jan 2018 15:55:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>STL容器的迭代器失效问题</title><link>http://samsonwang.me/posts/iterator-invalidate.html</link><dc:creator>Samson Wang</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;1 引言&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
常见的STL容器都能使用迭代器访问容器内元素，迭代器相同于一个指向容器内元素的指针，可以通过移动迭代器实现遍历容器。&lt;br&gt;
但是在使用迭代器时需要考虑STL容器的失效问题；迭代器失效主要出现在对容器进行了增删操作之后，迭代器不再指向原本的元素。&lt;br&gt;
这时如果再通过迭代器访问容器就有可能出现异常。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;2 map容器&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
&lt;b&gt;内部数据结构&lt;/b&gt; ：红黑树&lt;br&gt;
&lt;b&gt;插入操作&lt;/b&gt; ：插入操作会申请新的节点空间，然后加入都红黑树中，原来的迭代器指向的内存空间都未改变，故不会出现迭代器失效。&lt;br&gt;
&lt;b&gt;删除操作&lt;/b&gt; ：删除操作只会引起被删除节点的迭代器失效。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;3 vector容器&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
&lt;b&gt;内部数据结构&lt;/b&gt; ：数组(一段连续内存空间)&lt;br&gt;
&lt;b&gt;插入操作&lt;/b&gt; ：由于vector使用的是一段有长度限制的连续空间，插入( &lt;code&gt;push_back&lt;/code&gt; / &lt;code&gt;insert&lt;/code&gt; )操作在vector中加入新的元素时需要分情况考虑。&lt;br&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;当vector中元素总数仍不大于capacity，这时插入位置后的元素都被依次移动到下一个位置，所以插入位置之后的迭代器都会失效。&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;当vector中元素总数大于capacity，这个时候会重新开辟更大的内存空间，将原来的vector中的内容复制到新的vector中，回收原先vector的内存空间。由于新的vector的地址已完全改变，所以原先的所有迭代器都会失效。&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;b&gt;删除操作&lt;/b&gt; ：删除( &lt;code&gt;pop_back&lt;/code&gt; / &lt;code&gt;erase&lt;/code&gt; )操作在vector中删除元素，删除位置后的元素都被依次复制到前一个位置，所以删除位置之后的迭代器都会失效。&lt;br&gt;
示例代码：&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;4 list容器&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
&lt;b&gt;内部数据结构&lt;/b&gt; ：双向环状链表&lt;br&gt;
&lt;b&gt;插入操作&lt;/b&gt; ：插入操作会申请新的节点空间，然后加入到链表中，原来的迭代器指向的内存空间都未改变，故不会出现迭代器失效。&lt;br&gt;
&lt;b&gt;删除操作&lt;/b&gt; ：删除操作只会引起被删除节点的迭代器失效。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;5 小结&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
在操作STL容器时，对容器增删（ &lt;code&gt;erase&lt;/code&gt; / &lt;code&gt;insert&lt;/code&gt; ）之后应该注意接收返回值，这样可以有效避免迭代器失效的产生。&lt;br&gt;
对容器进行遍历删除操作时，另一种语法技巧是在 &lt;code&gt;erase&lt;/code&gt; 接口中对迭代器进行后自增（it++），这种写法也能够保证遍历正常进行。理解这种写法需要参考运算符重载的相关知识，后自增操作会产生一个临时变量用于函数返回。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cpp</category><category>STL</category><guid>http://samsonwang.me/posts/iterator-invalidate.html</guid><pubDate>Wed, 10 Jan 2018 14:06:04 GMT</pubDate></item><item><title>关于size_t和size_type的比较</title><link>http://samsonwang.me/posts/size_t-and-size_type.html</link><dc:creator>Samson Wang</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;1 引言&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
编程中常见的表示两种大小的类型标识符有 &lt;code&gt;size_t&lt;/code&gt; 和 &lt;code&gt;size_type&lt;/code&gt; ，这两种类型十分相似，非常容易混淆。本文对他们的使用场景进行了比较，并提供了示例代码。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;2 &lt;code&gt;size_t&lt;/code&gt; 类型&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
当需要描述某个对象的大小（size）时都应该使用 &lt;code&gt;size_t&lt;/code&gt; ，其大小被限制为 0 到 &lt;code&gt;SIZE_MAX&lt;/code&gt; 之间。&lt;br&gt;
&lt;code&gt;size_t&lt;/code&gt; 的定义在 &lt;code&gt;&amp;lt;cstddef&amp;gt;&lt;/code&gt; 中， &lt;code&gt;SIZE_MAX&lt;/code&gt; 的定义在 &lt;code&gt;&amp;lt;climits&amp;gt;&lt;/code&gt; 中。&lt;br&gt;
&lt;code&gt;size_t&lt;/code&gt; 一般会作为 &lt;code&gt;sizeof&lt;/code&gt; 运算符的返回结果，可以理解为在给定的平台中是统一的。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;3 &lt;code&gt;size_type&lt;/code&gt; 类型&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
在 &lt;code&gt;STL&lt;/code&gt; 中定义了 &lt;code&gt;size_type&lt;/code&gt; 是与 &lt;code&gt;Allocator::size_tpye&lt;/code&gt; 相对应的。而 &lt;code&gt;Allocator&lt;/code&gt; 是模板的一个参数。&lt;br&gt;
&lt;code&gt;size_type&lt;/code&gt; 可以理解为在给定容器范围内是统一的。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;4 二者之间的比较&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
这两种类型主要是为了提高代码的可移植性。一般情况来说，这两种类型是没有区别的，因为使用标准库默认的 &lt;code&gt;Allocator&lt;/code&gt; 所对应的 &lt;code&gt;size_type&lt;/code&gt; 就是 &lt;code&gt;size_t&lt;/code&gt; 。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;5 示例代码&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
注意 &lt;code&gt;size_type&lt;/code&gt; 在使用时需要加上容器类型限定。&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;size_type&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;size_type&lt;/span&gt; &lt;span class="n"&gt;n3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;6 参考资料&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://en.cppreference.com/w/cpp/types/size_t"&gt;http://en.cppreference.com/w/cpp/types/size_t&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/918567/size-t-vs-containersize-type"&gt;https://stackoverflow.com/questions/918567/size-t-vs-containersize-type&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cpp</category><guid>http://samsonwang.me/posts/size_t-and-size_type.html</guid><pubDate>Mon, 08 Jan 2018 09:27:13 GMT</pubDate></item><item><title>常见的由于语法不当引起的编译警告</title><link>http://samsonwang.me/posts/frequent-improper-syntax-warning-on-compile.html</link><dc:creator>Samson Wang</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;1 引言&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
本文主要总结了笔者自己的开发中遇到的不规范的代码写法。这些代码风格可能并不会引起错误，但是会产生隐患或容易引起歧义。&lt;br&gt;
这些语法缺陷可以通过合理配置编译器的编译选项检查出来，对于编译器的警告配置在前面有文章进行了简单介绍。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://samsonwang.me/posts/frequent-improper-syntax-warning-on-compile.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>cpp</category><category>gcc</category><guid>http://samsonwang.me/posts/frequent-improper-syntax-warning-on-compile.html</guid><pubDate>Wed, 03 Jan 2018 16:45:52 GMT</pubDate></item><item><title>在emacs中使用GNU Global的配置指南</title><link>http://samsonwang.me/posts/use-global-in-emacs.html</link><dc:creator>Samson Wang</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;1 引言&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
本文主要针对emacs中的global的配置和使用方法做了简要介绍。&lt;br&gt;
global是代码标签化索引工具，能够在许多源码中快速定位函数的实现位置。&lt;br&gt;
我主要使用global来辅助代码跳转；还有一种用法是用来辅助代码补全，目前正在研究中。&lt;br&gt;
&lt;/p&gt;


&lt;p&gt;&lt;a href="http://samsonwang.me/posts/use-global-in-emacs.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>global</category><category>gtags</category><guid>http://samsonwang.me/posts/use-global-in-emacs.html</guid><pubDate>Tue, 02 Jan 2018 15:47:05 GMT</pubDate></item><item><title>GCC编译时的警告（warn）相关参数</title><link>http://samsonwang.me/posts/gcc-warn-on-compile.html</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;p&gt;
编译阶段警告信息有助于排查代码中错误，合理配置编译警告信息能够提高开发效率。&lt;br&gt;
通过了解编译警告，也能够了解到哪些代码风格是不好的，有哪些代码的书写格式是容易出现问题的，有助于让自己写出更高质量的代码。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://samsonwang.me/posts/gcc-warn-on-compile.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>gcc</category><category>makefile</category><guid>http://samsonwang.me/posts/gcc-warn-on-compile.html</guid><pubDate>Sun, 31 Dec 2017 01:51:01 GMT</pubDate></item><item><title>linux 系统目录结构</title><link>http://samsonwang.me/posts/linux-directories.html</link><dc:creator>Samson Wang</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Linux系统的目录结构以及各个目录的作用&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;&lt;code&gt;/bin&lt;/code&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
bin是binary的缩写，这个目录存放使用者最经常使用的命令&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;&lt;code&gt;/boot&lt;/code&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
这里存放的是启动linux时使用的一些核心文件&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;&lt;code&gt;/etc&lt;/code&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
这个目录用来存放系统管理所需要的配置文件和子目录&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://samsonwang.me/posts/linux-directories.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>linux</category><guid>http://samsonwang.me/posts/linux-directories.html</guid><pubDate>Fri, 15 Dec 2017 09:12:25 GMT</pubDate></item><item><title>linux下使用GDB的调试技巧</title><link>http://samsonwang.me/posts/debug-with-gdb-on-linux.html</link><dc:creator>Samson Wang</dc:creator><description>&lt;div&gt;&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;1 代码编译阶段&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
在调试C/C++代码时，在编译阶段使用 &lt;code&gt;gcc/g++ -g&lt;/code&gt; 命令编译，将调试信息生成在目标文件中。&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;2 开启gdb模式&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;直接进入gdb模式: &lt;code&gt;gdb&lt;/code&gt; &lt;br&gt;
&lt;/li&gt;
&lt;li&gt;使用gdb模式开启一个新的进程: &lt;code&gt;gdb &amp;lt;appname&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;使用指定的程序来调试core文件: &lt;code&gt;gdb &amp;lt;appname&amp;gt; &amp;lt;corename&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://samsonwang.me/posts/debug-with-gdb-on-linux.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>GDB</category><category>linux</category><guid>http://samsonwang.me/posts/debug-with-gdb-on-linux.html</guid><pubDate>Tue, 24 Oct 2017 00:58:25 GMT</pubDate></item><item><title>终于，博客开通了</title><link>http://samsonwang.me/posts/blog-open-up.html</link><dc:creator>Samson Wang</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;1 前言&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Samson的博客开通了。&lt;br&gt;
作为码农，一直想要有个博客作为学习与积累的记录。&lt;br&gt;
在尝试过多种主流博客套路之后，终于选定了使用 emacs + org-mode + nikola + github pages 组合的技术方案。&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://samsonwang.me/posts/blog-open-up.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>nikola</category><category>org-mode</category><guid>http://samsonwang.me/posts/blog-open-up.html</guid><pubDate>Mon, 23 Oct 2017 13:58:25 GMT</pubDate></item></channel></rss>